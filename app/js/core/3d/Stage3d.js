var Stage3d;

Stage3d = (function() {
  function Stage3d() {}

  Stage3d.camera = null;

  Stage3d.cameraTarget = null;

  Stage3d.scene = null;

  Stage3d.renderer = null;

  Stage3d.init = function(options) {
    var antialias, h, transparent, w;
    w = window.innerWidth;
    h = window.innerHeight;
    h *= .8;
    this.camera = new THREE.PerspectiveCamera(40, w / h, 1, 10000);
    this.camera.position.z = 15000;
    this.cameraTarget = new THREE.Vector3(0, 0, 20);
    this.scene = new THREE.Scene();
    transparent = options.transparent || false;
    antialias = options.antialias || false;
    this.renderer = new THREE.WebGLRenderer({
      alpha: transparent,
      antialias: antialias
    });
    this.renderer.setSize(w, h);
    this.renderer.setClearColor(0);
    document.body.appendChild(this.renderer.domElement);
  };

  Stage3d.add = function(obj) {
    this.scene.add(obj);
  };

  Stage3d.remove = function(obj) {
    this.scene.remove(obj);
  };

  Stage3d.render = function() {
    Stage3d.renderer.render(this.scene, this.camera);
  };

  Stage3d.resize = function() {
    var h, w;
    if (this.renderer) {
      w = window.innerWidth;
      h = window.innerHeight;
      h *= .8;
      this.camera.aspect = w / h;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(w, h);
    }
  };

  Stage3d.initPostprocessing = function() {};

  return Stage3d;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvM2QvU3RhZ2UzZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsSUFBQSxPQUFBOztBQUFBO3VCQUVDOztBQUFBLEVBQUEsT0FBQyxDQUFBLE1BQUQsR0FBVSxJQUFWLENBQUE7O0FBQUEsRUFDQSxPQUFDLENBQUEsWUFBRCxHQUFnQixJQURoQixDQUFBOztBQUFBLEVBRUEsT0FBQyxDQUFBLEtBQUQsR0FBUyxJQUZULENBQUE7O0FBQUEsRUFHQSxPQUFDLENBQUEsUUFBRCxHQUFZLElBSFosQ0FBQTs7QUFBQSxFQUtBLE9BQUMsQ0FBQSxJQUFELEdBQVEsU0FBQyxPQUFELEdBQUE7QUFDUCxRQUFBLDRCQUFBO0FBQUEsSUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDLFVBQVgsQ0FBQTtBQUFBLElBQ0EsQ0FBQSxHQUFJLE1BQU0sQ0FBQyxXQURYLENBQUE7QUFBQSxJQUVBLENBQUEsSUFBSyxFQUZMLENBQUE7QUFBQSxJQUlBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxLQUFLLENBQUMsaUJBQU4sQ0FBeUIsRUFBekIsRUFBNkIsQ0FBQSxHQUFJLENBQWpDLEVBQW9DLENBQXBDLEVBQXVDLEtBQXZDLENBSmQsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBakIsR0FBcUIsS0FMckIsQ0FBQTtBQUFBLElBTUEsSUFBQyxDQUFBLFlBQUQsR0FBb0IsSUFBQSxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQsRUFBZ0IsQ0FBaEIsRUFBa0IsRUFBbEIsQ0FOcEIsQ0FBQTtBQUFBLElBUUEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxLQUFOLENBQUEsQ0FSYixDQUFBO0FBQUEsSUFXQSxXQUFBLEdBQWMsT0FBTyxDQUFDLFdBQVIsSUFBcUIsS0FYbkMsQ0FBQTtBQUFBLElBWUEsU0FBQSxHQUFZLE9BQU8sQ0FBQyxTQUFSLElBQW1CLEtBWi9CLENBQUE7QUFBQSxJQWNBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsS0FBSyxDQUFDLGFBQU4sQ0FBb0I7QUFBQSxNQUFDLEtBQUEsRUFBTSxXQUFQO0FBQUEsTUFBbUIsU0FBQSxFQUFVLFNBQTdCO0tBQXBCLENBZGhCLENBQUE7QUFBQSxJQWVBLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixDQUFtQixDQUFuQixFQUFzQixDQUF0QixDQWZBLENBQUE7QUFBQSxJQWdCQSxJQUFDLENBQUEsUUFBUSxDQUFDLGFBQVYsQ0FBeUIsQ0FBekIsQ0FoQkEsQ0FBQTtBQUFBLElBbUJBLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixJQUFDLENBQUEsUUFBUSxDQUFDLFVBQXBDLENBbkJBLENBRE87RUFBQSxDQUxSLENBQUE7O0FBQUEsRUE0QkEsT0FBQyxDQUFBLEdBQUQsR0FBTyxTQUFDLEdBQUQsR0FBQTtBQUNOLElBQUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsR0FBWCxDQUFBLENBRE07RUFBQSxDQTVCUCxDQUFBOztBQUFBLEVBZ0NBLE9BQUMsQ0FBQSxNQUFELEdBQVUsU0FBQyxHQUFELEdBQUE7QUFDVCxJQUFBLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFjLEdBQWQsQ0FBQSxDQURTO0VBQUEsQ0FoQ1YsQ0FBQTs7QUFBQSxFQW9DQSxPQUFDLENBQUEsTUFBRCxHQUFVLFNBQUEsR0FBQTtBQUVULElBQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFqQixDQUF3QixJQUFDLENBQUEsS0FBekIsRUFBZ0MsSUFBQyxDQUFBLE1BQWpDLENBQUEsQ0FGUztFQUFBLENBcENWLENBQUE7O0FBQUEsRUF5Q0EsT0FBQyxDQUFBLE1BQUQsR0FBVSxTQUFBLEdBQUE7QUFDVCxRQUFBLElBQUE7QUFBQSxJQUFBLElBQUcsSUFBQyxDQUFBLFFBQUo7QUFDQyxNQUFBLENBQUEsR0FBSSxNQUFNLENBQUMsVUFBWCxDQUFBO0FBQUEsTUFDQSxDQUFBLEdBQUksTUFBTSxDQUFDLFdBRFgsQ0FBQTtBQUFBLE1BRUEsQ0FBQSxJQUFLLEVBRkwsQ0FBQTtBQUFBLE1BR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCLENBQUEsR0FBSSxDQUhyQixDQUFBO0FBQUEsTUFJQSxJQUFDLENBQUEsTUFBTSxDQUFDLHNCQUFSLENBQUEsQ0FKQSxDQUFBO0FBQUEsTUFLQSxJQUFDLENBQUEsUUFBUSxDQUFDLE9BQVYsQ0FBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FMQSxDQUREO0tBRFM7RUFBQSxDQXpDVixDQUFBOztBQUFBLEVBbURBLE9BQUMsQ0FBQSxrQkFBRCxHQUFzQixTQUFBLEdBQUEsQ0FuRHRCLENBQUE7O2lCQUFBOztJQUZELENBQUEiLCJmaWxlIjoiY29yZS8zZC9TdGFnZTNkLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyBcbiMgU3RhZ2UzZCBmb3IgdGhyZWUuanMgd2l0aCBldmVyeSBiYXNpY3MgeW91IG5lZWRcbiMgQGF1dGhvciBEYXZpZCBSb25haSAvIE1ha2lvcG9saXMuY29tIC8gQE1ha2lvNjQgXG4jIFxuY2xhc3MgU3RhZ2UzZFxuXG5cdEBjYW1lcmEgPSBudWxsXG5cdEBjYW1lcmFUYXJnZXQgPSBudWxsXG5cdEBzY2VuZSA9IG51bGxcblx0QHJlbmRlcmVyID0gbnVsbFxuXG5cdEBpbml0ID0gKG9wdGlvbnMpLT5cblx0XHR3ID0gd2luZG93LmlubmVyV2lkdGhcblx0XHRoID0gd2luZG93LmlubmVySGVpZ2h0XG5cdFx0aCAqPSAuOFxuXG5cdFx0QGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNDAsIHcgLyBoLCAxLCAxMDAwMCApXG5cdFx0QGNhbWVyYS5wb3NpdGlvbi56ID0gMTUwMDBcblx0XHRAY2FtZXJhVGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDIwKVxuXG5cdFx0QHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKClcblx0XHQjIEBwcm9qZWN0b3IgPSBuZXcgVEhSRUUuUHJvamVjdG9yKClcblxuXHRcdHRyYW5zcGFyZW50ID0gb3B0aW9ucy50cmFuc3BhcmVudHx8ZmFsc2Vcblx0XHRhbnRpYWxpYXMgPSBvcHRpb25zLmFudGlhbGlhc3x8ZmFsc2VcblxuXHRcdEByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbHBoYTp0cmFuc3BhcmVudCxhbnRpYWxpYXM6YW50aWFsaWFzfSlcblx0XHRAcmVuZGVyZXIuc2V0U2l6ZSggdywgaCApXG5cdFx0QHJlbmRlcmVyLnNldENsZWFyQ29sb3IoIDAgKTtcblxuXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChAcmVuZGVyZXIuZG9tRWxlbWVudClcblx0XHRyZXR1cm5cblxuXHRAYWRkID0gKG9iaiktPlxuXHRcdEBzY2VuZS5hZGQob2JqKVxuXHRcdHJldHVyblxuXG5cdEByZW1vdmUgPSAob2JqKS0+XG5cdFx0QHNjZW5lLnJlbW92ZShvYmopXG5cdFx0cmV0dXJuXG5cblx0QHJlbmRlciA9ICgpLT5cblx0XHQjIEBjYW1lcmEubG9va0F0KEBzY2VuZS5wb3NpdGlvbilcblx0XHRTdGFnZTNkLnJlbmRlcmVyLnJlbmRlcihAc2NlbmUsIEBjYW1lcmEpXG5cdFx0cmV0dXJuXG5cblx0QHJlc2l6ZSA9ICgpLT5cblx0XHRpZiBAcmVuZGVyZXJcblx0XHRcdHcgPSB3aW5kb3cuaW5uZXJXaWR0aFxuXHRcdFx0aCA9IHdpbmRvdy5pbm5lckhlaWdodFxuXHRcdFx0aCAqPSAuOFxuXHRcdFx0QGNhbWVyYS5hc3BlY3QgPSB3IC8gaFxuXHRcdFx0QGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KClcblx0XHRcdEByZW5kZXJlci5zZXRTaXplKCB3LCBoIClcblx0XHRyZXR1cm5cblxuXHRAaW5pdFBvc3Rwcm9jZXNzaW5nID0gKCktPlxuXHRcdHJldHVybiJdfQ==