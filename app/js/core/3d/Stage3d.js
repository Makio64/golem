var Stage3d;

Stage3d = (function() {
  function Stage3d() {}

  Stage3d.camera = null;

  Stage3d.cameraTarget = null;

  Stage3d.scene = null;

  Stage3d.renderer = null;

  Stage3d.init = function(options) {
    var antialias, h, transparent, w;
    w = window.innerWidth;
    h = window.innerHeight;
    h *= .8;
    this.camera = new THREE.PerspectiveCamera(40, w / h, 1, 10000);
    this.camera.position.z = 15000;
    this.cameraTarget = new THREE.Vector3(0, 0, 20);
    this.scene = new THREE.Scene();
    transparent = options.transparent || false;
    antialias = options.antialias || false;
    this.renderer = new THREE.WebGLRenderer({
      alpha: transparent,
      antialias: antialias
    });
    this.renderer.setSize(w, h);
    this.renderer.setClearColor(0, 0);
    this.renderer.autoClear = false;
    document.body.appendChild(this.renderer.domElement);
    this.renderer.render(this.scene, this.camera);
  };

  Stage3d.add = function(obj) {
    this.scene.add(obj);
  };

  Stage3d.addOclusion = function(obj) {
    this.postprocessing.oclScene.add(obj);
  };

  Stage3d.remove = function(obj) {
    this.scene.remove(obj);
  };

  Stage3d.render = function() {
    this.renderer.clear();
    this.renderer.render(this.scene, this.camera);
    if (this.postprocessing) {
      this.renderer.clearTarget(this.postprocessing.rtTexture, true, true, true);
      this.renderer.render(this.postprocessing.oclScene, this.camera, this.postprocessing.rtTexture);
      this.renderer.render(this.postprocessing.sceneVertical, this.postprocessing.orthographicCamera, this.postprocessing.rtTexture);
      this.renderer.render(this.postprocessing.sceneHorizontal, this.postprocessing.orthographicCamera, this.postprocessing.rtTexture);
      this.renderer.render(this.postprocessing.sceneVertical, this.postprocessing.orthographicCamera, this.postprocessing.rtTexture);
      this.renderer.render(this.postprocessing.sceneHorizontal, this.postprocessing.orthographicCamera, this.postprocessing.rtTexture);
      this.renderer.render(this.postprocessing.finalScene, this.postprocessing.orthographicCamera);
    }
  };

  Stage3d.resize = function() {
    var h, w;
    if (this.renderer) {
      w = window.innerWidth;
      h = window.innerHeight;
      h *= .8;
      this.camera.aspect = w / h;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(w, h);
    }
  };

  Stage3d.initPostprocessing = function() {
    var h, material, quad, w;
    Stage3d.postprocessing = {};
    Stage3d.postprocessing.oclScene = new THREE.Scene();
    Stage3d.postprocessing.sceneVertical = new THREE.Scene();
    Stage3d.postprocessing.sceneHorizontal = new THREE.Scene();
    Stage3d.postprocessing.oclScene = new THREE.Scene();
    Stage3d.postprocessing.finalScene = new THREE.Scene();
    Stage3d.postprocessing.orthographicCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
    w = window.innerWidth * window.devicePixelRatio;
    h = window.innerHeight * window.devicePixelRatio;
    w /= 4;
    h /= 4;
    Stage3d.postprocessing.rtTexture = new THREE.WebGLRenderTarget(w, h, {
      minFilter: THREE.LinearFilter,
      magFilter: THREE.LinearFilter,
      format: THREE.RGBAFormat
    });
    material = new THREE.MeshBasicMaterial({
      color: 0xFFFFFF,
      blending: THREE.AdditiveBlending,
      map: Stage3d.postprocessing.rtTexture,
      transparent: true,
      opacity: .6
    });
    quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), material);
    Stage3d.postprocessing.finalScene.add(quad);
    material = new THREE.ShaderMaterial({
      vertexShader: Data.shaders.vBlur.vertex,
      fragmentShader: Data.shaders.vBlur.fragment,
      uniforms: {
        "tDiffuse": {
          type: "t",
          value: Stage3d.postprocessing.rtTexture
        },
        "v": {
          type: "f",
          value: 2.0 / window.innerHeight
        }
      },
      transparent: true
    });
    quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), material);
    Stage3d.postprocessing.sceneHorizontal.add(quad);
    material = new THREE.ShaderMaterial({
      vertexShader: Data.shaders.hBlur.vertex,
      fragmentShader: Data.shaders.hBlur.fragment,
      uniforms: {
        "tDiffuse": {
          type: "t",
          value: Stage3d.postprocessing.rtTexture
        },
        "v": {
          type: "f",
          value: 2.0 / window.innerWidth
        }
      },
      transparent: true
    });
    quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), material);
    Stage3d.postprocessing.sceneHorizontal.add(quad);
    Stage3d.postprocessing.blackMaterial = new THREE.MeshBasicMaterial({
      color: 0x000000
    });
  };

  return Stage3d;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvM2QvU3RhZ2UzZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsSUFBQSxPQUFBOztBQUFBO3VCQUVDOztBQUFBLEVBQUEsT0FBQyxDQUFBLE1BQUQsR0FBVSxJQUFWLENBQUE7O0FBQUEsRUFDQSxPQUFDLENBQUEsWUFBRCxHQUFnQixJQURoQixDQUFBOztBQUFBLEVBRUEsT0FBQyxDQUFBLEtBQUQsR0FBUyxJQUZULENBQUE7O0FBQUEsRUFHQSxPQUFDLENBQUEsUUFBRCxHQUFZLElBSFosQ0FBQTs7QUFBQSxFQUtBLE9BQUMsQ0FBQSxJQUFELEdBQVEsU0FBQyxPQUFELEdBQUE7QUFDUCxRQUFBLDRCQUFBO0FBQUEsSUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDLFVBQVgsQ0FBQTtBQUFBLElBQ0EsQ0FBQSxHQUFJLE1BQU0sQ0FBQyxXQURYLENBQUE7QUFBQSxJQUVBLENBQUEsSUFBSyxFQUZMLENBQUE7QUFBQSxJQUlBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxLQUFLLENBQUMsaUJBQU4sQ0FBeUIsRUFBekIsRUFBNkIsQ0FBQSxHQUFJLENBQWpDLEVBQW9DLENBQXBDLEVBQXVDLEtBQXZDLENBSmQsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBakIsR0FBcUIsS0FMckIsQ0FBQTtBQUFBLElBTUEsSUFBQyxDQUFBLFlBQUQsR0FBb0IsSUFBQSxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQsRUFBZ0IsQ0FBaEIsRUFBa0IsRUFBbEIsQ0FOcEIsQ0FBQTtBQUFBLElBUUEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxLQUFOLENBQUEsQ0FSYixDQUFBO0FBQUEsSUFXQSxXQUFBLEdBQWMsT0FBTyxDQUFDLFdBQVIsSUFBcUIsS0FYbkMsQ0FBQTtBQUFBLElBWUEsU0FBQSxHQUFZLE9BQU8sQ0FBQyxTQUFSLElBQW1CLEtBWi9CLENBQUE7QUFBQSxJQWNBLElBQUMs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O0FBQUEsSUFxQ0EsUUFBQSxHQUFlLElBQUEsS0FBSyxDQUFDLGNBQU4sQ0FBc0I7QUFBQSxNQUNwQyxZQUFBLEVBQWMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFERztBQUFBLE1BRXBDLGNBQUEsRUFBZ0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFGQztBQUFBLE1BR3BDLFFBQUEsRUFBVTtBQUFBLFFBQ1QsVUFBQSxFQUFZO0FBQUEsVUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFVBQWEsS0FBQSxFQUFPLE9BQUMsQ0FBQSxjQUFjLENBQUMsU0FBcEM7U0FESDtBQUFBLFFBRVQsR0FBQSxFQUFZO0FBQUEsVUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFVBQWEsS0FBQSxFQUFPLEdBQUEsR0FBTSxNQUFNLENBQUMsVUFBakM7U0FGSDtPQUgwQjtBQUFBLE1BT3BDLFdBQUEsRUFBYSxJQVB1QjtLQUF0QixDQXJDZixDQUFBO0FBQUEsSUErQ0EsSUFBQSxHQUFXLElBQUEsS0FBSyxDQUFDLElBQU4sQ0FBZ0IsSUFBQSxLQUFLLENBQUMsbUJBQU4sQ0FBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBaEIsRUFBbUQsUUFBbkQsQ0EvQ1gsQ0FBQTtBQUFBLElBZ0RBLE9BQUMsQ0FBQSxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQWhDLENBQXFDLElBQXJDLENBaERBLENBQUE7QUFBQSxJQWtEQSxPQUFDLENBQUEsY0FBYyxDQUFDLGFBQWhCLEdBQW9DLElBQUEsS0FBSyxDQUFDLGlCQUFOLENBQXlCO0FBQUEsTUFBRSxLQUFBLEVBQU8sUUFBVDtLQUF6QixDQWxEcEMsQ0FGcUI7RUFBQSxDQWpFdEIsQ0FBQTs7aUJBQUE7O0lBRkQsQ0FBQSIsImZpbGUiOiJjb3JlLzNkL1N0YWdlM2QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIFxuIyBTdGFnZTNkIGZvciB0aHJlZS5qcyB3aXRoIGV2ZXJ5IGJhc2ljcyB5b3UgbmVlZFxuIyBAYXV0aG9yIERhdmlkIFJvbmFpIC8gTWFraW9wb2xpcy5jb20gLyBATWFraW82NCBcbiMgXG5jbGFzcyBTdGFnZTNkXG5cblx0QGNhbWVyYSA9IG51bGxcblx0QGNhbWVyYVRhcmdldCA9IG51bGxcblx0QHNjZW5lID0gbnVsbFxuXHRAcmVuZGVyZXIgPSBudWxsXG5cblx0QGluaXQgPSAob3B0aW9ucyktPlxuXHRcdHcgPSB3aW5kb3cuaW5uZXJXaWR0aFxuXHRcdGggPSB3aW5kb3cuaW5uZXJIZWlnaHRcblx0XHRoICo9IC44XG5cblx0XHRAY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCA0MCwgdyAvIGgsIDEsIDEwMDAwIClcblx0XHRAY2FtZXJhLnBvc2l0aW9uLnogPSAxNTAwMFxuXHRcdEBjYW1lcmFUYXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygwLDAsMjApXG5cblx0XHRAc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuXHRcdCMgQHByb2plY3RvciA9IG5ldyBUSFJFRS5Qcm9qZWN0b3IoKVxuXG5cdFx0dHJhbnNwYXJlbnQgPSBvcHRpb25zLnRyYW5zcGFyZW50fHxmYWxzZVxuXHRcdGFudGlhbGlhcyA9IG9wdGlvbnMuYW50aWFsaWFzfHxmYWxzZVxuXG5cdFx0QHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FscGhhOnRyYW5zcGFyZW50LGFudGlhbGlhczphbnRpYWxpYXN9KVxuXHRcdEByZW5kZXJlci5zZXRTaXplKCB3LCBoIClcblx0XHRAcmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggMCwgMCApO1xuXHRcdEByZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZVxuXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChAcmVuZGVyZXIuZG9tRWxlbWVudClcblx0XHRAcmVuZGVyZXIucmVuZGVyKEBzY2VuZSwgQGNhbWVyYSlcblx0XHRyZXR1cm5cblxuXHRAYWRkID0gKG9iaiktPlxuXHRcdEBzY2VuZS5hZGQob2JqKVxuXHRcdHJldHVyblxuXG5cdEBhZGRPY2x1c2lvbiA9IChvYmopLT5cblx0XHRAcG9zdHByb2Nlc3Npbmcub2NsU2NlbmUuYWRkKG9iailcblx0XHRyZXR1cm5cblxuXHRAcmVtb3ZlID0gKG9iaiktPlxuXHRcdEBzY2VuZS5yZW1vdmUob2JqKVxuXHRcdHJldHVyblxuXG5cdEByZW5kZXIgPSAoKS0+XG5cdFx0QHJlbmRlcmVyLmNsZWFyKCkgI2NsZWFyIHRoZSBzdGFnZVxuXHRcdEByZW5kZXJlci5yZW5kZXIoQHNjZW5lLCBAY2FtZXJhKSAjcmVuZGVyIGJhc2ljIHNjZW5lXG5cblx0XHRpZiBAcG9zdHByb2Nlc3Npbmdcblx0XHRcdEByZW5kZXJlci5jbGVhclRhcmdldChAcG9zdHByb2Nlc3NpbmcucnRUZXh0dXJlLHRydWUsdHJ1ZSx0cnVlKSAjY2xlYXIgdGhlIHJlbmRlcmluZyB0YXJnZXRcblx0XHRcdEByZW5kZXJlci5yZW5kZXIoQHBvc3Rwcm9jZXNzaW5nLm9jbFNjZW5lLCBAY2FtZXJhLCBAcG9zdHByb2Nlc3NpbmcucnRUZXh0dXJlKSAjcmVuZGVyIHRoZSBvY2NsdXNpb24gc2NlbmVcblx0XHRcdEByZW5kZXJlci5yZW5kZXIoQHBvc3Rwcm9jZXNzaW5nLnNjZW5lVmVydGljYWwsIEBwb3N0cHJvY2Vzc2luZy5vcnRob2dyYXBoaWNDYW1lcmEsIEBwb3N0cHJvY2Vzc2luZy5ydFRleHR1cmUpICNibHVyIGl0XG5cdFx0XHRAcmVuZGVyZXIucmVuZGVyKEBwb3N0cHJvY2Vzc2luZy5zY2VuZUhvcml6b250YWwsIEBwb3N0cHJvY2Vzc2luZy5vcnRob2dyYXBoaWNDYW1lcmEsIEBwb3N0cHJvY2Vzc2luZy5ydFRleHR1cmUpICNibHVyIGl0XG5cdFx0XHRAcmVuZGVyZXIucmVuZGVyKEBwb3N0cHJvY2Vzc2luZy5zY2VuZVZlcnRpY2FsLCBAcG9zdHByb2Nlc3Npbmcub3J0aG9ncmFwaGljQ2FtZXJhLCBAcG9zdHByb2Nlc3NpbmcucnRUZXh0dXJlKSAjYmx1ciBpdFxuXHRcdFx0QHJlbmRlcmVyLnJlbmRlcihAcG9zdHByb2Nlc3Npbmcuc2NlbmVIb3Jpem9udGFsLCBAcG9zdHByb2Nlc3Npbmcub3J0aG9ncmFwaGljQ2FtZXJhLCBAcG9zdHByb2Nlc3NpbmcucnRUZXh0dXJlKSAjYmx1ciBpdFxuXHRcdFx0QHJlbmRlcmVyLnJlbmRlcihAcG9zdHByb2Nlc3NpbmcuZmluYWxTY2VuZSwgQHBvc3Rwcm9jZXNzaW5nLm9ydGhvZ3JhcGhpY0NhbWVyYSkgI2RyYXcgaW4gYWRkaXRpdmVcblx0XHRyZXR1cm5cblxuXHRAcmVzaXplID0gKCktPlxuXHRcdGlmIEByZW5kZXJlclxuXHRcdFx0dyA9IHdpbmRvdy5pbm5lcldpZHRoXG5cdFx0XHRoID0gd2luZG93LmlubmVySGVpZ2h0XG5cdFx0XHRoICo9IC44XG5cdFx0XHRAY2FtZXJhLmFzcGVjdCA9IHcgLyBoXG5cdFx0XHRAY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKVxuXHRcdFx0QHJlbmRlcmVyLnNldFNpemUoIHcsIGggKVxuXHRcdHJldHVyblxuXG5cdEBpbml0UG9zdHByb2Nlc3NpbmcgPSAoKT0+XG5cblx0XHRAcG9zdHByb2Nlc3NpbmcgPSB7fVxuXHRcdEBwb3N0cHJvY2Vzc2luZy5vY2xTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXG5cdFx0QHBvc3Rwcm9jZXNzaW5nLnNjZW5lVmVydGljYWwgPSBuZXcgVEhSRUUuU2NlbmUoKVxuXHRcdEBwb3N0cHJvY2Vzc2luZy5zY2VuZUhvcml6b250YWwgPSBuZXcgVEhSRUUuU2NlbmUoKVxuXHRcdEBwb3N0cHJvY2Vzc2luZy5vY2xTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXG5cdFx0QHBvc3Rwcm9jZXNzaW5nLmZpbmFsU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuXHRcdEBwb3N0cHJvY2Vzc2luZy5vcnRob2dyYXBoaWNDYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKCAtMSwgMSwgMSwgLTEsIDAsIDEgKVxuXHRcdHcgPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG5cdFx0aCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG5cdFx0dyAvPSA0XG5cdFx0aCAvPSA0XG5cdFx0QHBvc3Rwcm9jZXNzaW5nLnJ0VGV4dHVyZSA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldCh3LCBoLCB7IG1pbkZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLCBtYWdGaWx0ZXI6IFRIUkVFLkxpbmVhckZpbHRlciwgZm9ybWF0OiBUSFJFRS5SR0JBRm9ybWF0IH0pXG5cdFx0XG5cdFx0IyBmaW5hbCBhZGRpdGl2ZSBzY2VuZVxuXHRcdG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7XG5cdFx0XHRjb2xvcjoweEZGRkZGRlxuXHRcdFx0YmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmdcblx0XHRcdG1hcDogQHBvc3Rwcm9jZXNzaW5nLnJ0VGV4dHVyZVxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWVcblx0XHRcdG9wYWNpdHk6LjZcblx0XHR9ICk7XG5cdFx0cXVhZCA9IG5ldyBUSFJFRS5NZXNoKCBuZXcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeSggMiwgMiApLCBtYXRlcmlhbCApXG5cdFx0QHBvc3Rwcm9jZXNzaW5nLmZpbmFsU2NlbmUuYWRkKCBxdWFkIClcblxuXHRcdCMgYmx1ciBzY2VuZVxuXHRcdG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IERhdGEuc2hhZGVycy52Qmx1ci52ZXJ0ZXhcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBEYXRhLnNoYWRlcnMudkJsdXIuZnJhZ21lbnRcblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdFwidERpZmZ1c2VcIjogeyB0eXBlOiBcInRcIiwgdmFsdWU6IEBwb3N0cHJvY2Vzc2luZy5ydFRleHR1cmUgfSxcblx0XHRcdFx0XCJ2XCI6ICAgICAgICB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMi4wIC8gd2luZG93LmlubmVySGVpZ2h0IH1cblx0XHRcdH0sXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZVxuXHRcdH0gKTtcblxuXHRcdHF1YWQgPSBuZXcgVEhSRUUuTWVzaCggbmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkoIDIsIDIgKSwgbWF0ZXJpYWwgKVxuXHRcdEBwb3N0cHJvY2Vzc2luZy5zY2VuZUhvcml6b250YWwuYWRkKCBxdWFkIClcblx0XHRtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0dmVydGV4U2hhZGVyOiBEYXRhLnNoYWRlcnMuaEJsdXIudmVydGV4XG5cdFx0XHRmcmFnbWVudFNoYWRlcjogRGF0YS5zaGFkZXJzLmhCbHVyLmZyYWdtZW50XG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHRcInREaWZmdXNlXCI6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiBAcG9zdHByb2Nlc3NpbmcucnRUZXh0dXJlIH0sXG5cdFx0XHRcdFwidlwiOiAgICAgICAgeyB0eXBlOiBcImZcIiwgdmFsdWU6IDIuMCAvIHdpbmRvdy5pbm5lcldpZHRoIH1cblx0XHRcdH0sXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZVxuXHRcdH0gKTtcblxuXHRcdHF1YWQgPSBuZXcgVEhSRUUuTWVzaCggbmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkoIDIsIDIgKSwgbWF0ZXJpYWwgKVxuXHRcdEBwb3N0cHJvY2Vzc2luZy5zY2VuZUhvcml6b250YWwuYWRkKCBxdWFkIClcblxuXHRcdEBwb3N0cHJvY2Vzc2luZy5ibGFja01hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweDAwMDAwMCB9IClcblx0XHRcblx0XHQjIEBwb3N0cHJvY2Vzc2luZy5oYmx1ciA9IG5ldyBUSFJFRS5TaGFkZXJQYXNzKCBUSFJFRS5TaGFkZXJFeHRyYXNbIFwiaG9yaXpvbnRhbEJsdXJcIiBdIClcblx0XHQjIEBwb3N0cHJvY2Vzc2luZy52Ymx1ciA9IG5ldyBUSFJFRS5TaGFkZXJQYXNzKCBUSFJFRS5TaGFkZXJFeHRyYXNbIFwidmVydGljYWxCbHVyXCIgXSApXG5cdFx0IFxuXHRcdCMgYmx1cmluZXNzID0gMztcblx0XHQgXG5cdFx0IyBAcG9zdHByb2Nlc3NpbmcuaGJsdXIudW5pZm9ybXNbIFwiaFwiIF0udmFsdWUgPSBibHVyaW5lc3MgLyB3O1xuXHRcdCMgQHBvc3Rwcm9jZXNzaW5nLnZibHVyLnVuaWZvcm1zWyBcInZcIiBdLnZhbHVlID0gYmx1cmluZXNzIC8gaDtcblxuXHRcdCMgQHBvc3Rwcm9jZXNzaW5nLmNvbXBvc2VyID0gbmV3IFRIUkVFLkVmZmVjdENvbXBvc2VyKCByZW5kZXJlciwgQHBvc3Rwcm9jZXNzaW5nLnJ0VGV4dHVyZSApXG5cdFx0IyBAcG9zdHByb2Nlc3NpbmcuY29tcG9zZXIuYWRkUGFzcyggbmV3IFRIUkVFLlJlbmRlclBhc3MoIEBwb3N0cHJvY2Vzc2luZy5vY2xTY2VuZSwgQGNhbWVyYSApIClcblx0XHQjIEBwb3N0cHJvY2Vzc2luZy5jb21wb3Nlci5hZGRQYXNzKCBAcG9zdHByb2Nlc3NpbmcuaGJsdXIgKVxuXHRcdCMgQHBvc3Rwcm9jZXNzaW5nLmNvbXBvc2VyLmFkZFBhc3MoIEBwb3N0cHJvY2Vzc2luZy52Ymx1ciApXG5cdFx0IyBAcG9zdHByb2Nlc3NpbmcuY29tcG9zZXIuYWRkUGFzcyggQHBvc3Rwcm9jZXNzaW5nLmhibHVyIClcblx0XHQjIEBwb3N0cHJvY2Vzc2luZy5jb21wb3Nlci5hZGRQYXNzKCBAcG9zdHByb2Nlc3NpbmcudmJsdXIgKVxuXHRcdHJldHVybiJdfQ==