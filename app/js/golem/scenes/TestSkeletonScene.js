var TestSkeletonScene,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TestSkeletonScene = (function(_super) {
  __extends(TestSkeletonScene, _super);

  function TestSkeletonScene() {
    var b, folder, gui, _i, _len, _ref;
    gui = new dat.GUI();
    Stage3d.camera.position.set(0, 10, 300);
    this.scaleY = 1.4;
    gui.add(this, 'scaleY', 0.001, 2).name('bodyScaleY');
    gui.add(Stage3d.scene.rotation, 'y', 0, Math.PI * 10);
    this.head = new Attractor3d(10, 'head');
    this.head.basePosition.set(0, 50, 30);
    this.body = new Attractor3d(50, 'body');
    this.body.basePosition.set(0, 25, 0);
    this.shoulderLeft = new Attractor3d(5, 'shoulderLeft');
    this.shoulderLeft.basePosition.set(-50, 50, 0);
    this.shoulderRight = new Attractor3d(5, 'shoulderRight');
    this.shoulderRight.basePosition.set(50, 50, 0);
    this.handLeft = new Attractor3d(5, 'handLeft');
    this.handLeft.basePosition.set(-75, -5, 0);
    this.handRight = new Attractor3d(5, 'handRight');
    this.handRight.basePosition.set(75, -5, 0);
    this.elbowLeft = new Attractor3d(5, 'elbowLeft');
    this.elbowLeft.basePosition.set(-70, 20, -5);
    this.elbowRight = new Attractor3d(5, 'elbowRight');
    this.elbowRight.basePosition.set(70, 20, -5);
    this.bodies = [this.head, this.body, this.shoulderLeft, this.shoulderRight, this.handLeft, this.handRight, this.elbowRight, this.elbowLeft];
    _ref = this.bodies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      folder = gui.addFolder(b.name);
      folder.add(b.basePosition, 'x', -100, 100).step(1).name('base x');
      folder.add(b.basePosition, 'y', -100, 100).step(1).name('base y');
      folder.add(b.basePosition, 'z', -100, 100).step(1).name('base z');
      Stage3d.add(b);
      folder.close();
    }
    return;
  }

  TestSkeletonScene.prototype.update = function(dt) {
    var b, _i, _len, _ref;
    _ref = this.bodies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      b.update(dt, this.scaleY);
    }
  };

  return TestSkeletonScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtL3NjZW5lcy9UZXN0U2tlbGV0b25TY2VuZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxpQkFBQTtFQUFBO2lTQUFBOztBQUFBO0FBRUMsc0NBQUEsQ0FBQTs7QUFBWSxFQUFBLDJCQUFBLEdBQUE7QUFFWCxRQUFBLDhCQUFBO0FBQUEsSUFBQSxHQUFBLEdBQVUsSUFBQSxHQUFHLENBQUMsR0FBSixDQUFBLENBQVYsQ0FBQTtBQUFBLElBRUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBeEIsQ0FBNEIsQ0FBNUIsRUFBOEIsRUFBOUIsRUFBaUMsR0FBakMsQ0FGQSxDQUFBO0FBQUEsSUFJQSxJQUFDLENBQUEsTUFBRCxHQUFVLEdBSlYsQ0FBQTtBQUFBLElBTUEsR0FBRyxDQUFDLEdBQUosQ0FBUSxJQUFSLEVBQVUsUUFBVixFQUFtQixLQUFuQixFQUF5QixDQUF6QixDQUEyQixDQUFDLElBQTVCLENBQWlDLFlBQWpDLENBTkEsQ0FBQTtBQUFBLElBT0EsR0FBRyxDQUFDLEdBQUosQ0FBUSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQXRCLEVBQStCLEdBQS9CLEVBQW1DLENBQW5DLEVBQXFDLElBQUksQ0FBQyxFQUFMLEdBQVEsRUFBN0MsQ0FQQSxDQUFBO0FBQUEsSUFTQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsV0FBQSxDQUFZLEVBQVosRUFBZSxNQUFmLENBVFosQ0FBQTtBQUFBLElBVUEsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBbkIsQ0FBdUIsQ0FBdkIsRUFBeUIsRUFBekIsRUFBNEIsRUFBNUIsQ0FWQSxDQUFBO0FBQUEsSUFZQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsV0FBQSxDQUFZLEVBQVosRUFBZSxNQUFmLENBWlosQ0FBQTtBQUFBLElBYUEsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBbkIsQ0FBdUIsQ0FBdkIsRUFBeUIsRUFBekIsRUFBNEIs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QWhELENBQXFELFFBQXJELENBSEEsQ0FBQTtBQUFBLE1BSUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFaLENBSkEsQ0FBQTtBQUFBLE1BS0EsTUFBTSxDQUFDLEtBQVAsQ0FBQSxDQUxBLENBREQ7QUFBQSxLQW5DQTtBQTJDQSxVQUFBLENBN0NXO0VBQUEsQ0FBWjs7QUFBQSw4QkErQ0EsTUFBQSxHQUFPLFNBQUMsRUFBRCxHQUFBO0FBQ04sUUFBQSxpQkFBQTtBQUFBO0FBQUEsU0FBQSwyQ0FBQTttQkFBQTtBQUNDLE1BQUEsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxFQUFULEVBQVksSUFBQyxDQUFBLE1BQWIsQ0FBQSxDQUREO0FBQUEsS0FETTtFQUFBLENBL0NQLENBQUE7OzJCQUFBOztHQUYrQixNQUFoQyxDQUFBIiwiZmlsZSI6ImdvbGVtL3NjZW5lcy9UZXN0U2tlbGV0b25TY2VuZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFRlc3RTa2VsZXRvblNjZW5lIGV4dGVuZHMgU2NlbmVcblxuXHRjb25zdHJ1Y3RvcjooKS0+XG5cblx0XHRndWkgPSBuZXcgZGF0LkdVSSgpXG5cblx0XHRTdGFnZTNkLmNhbWVyYS5wb3NpdGlvbi5zZXQoMCwxMCwzMDApXG5cblx0XHRAc2NhbGVZID0gMS40XG5cblx0XHRndWkuYWRkKEAsJ3NjYWxlWScsMC4wMDEsMikubmFtZSgnYm9keVNjYWxlWScpXG5cdFx0Z3VpLmFkZChTdGFnZTNkLnNjZW5lLnJvdGF0aW9uLCd5JywwLE1hdGguUEkqMTApXG5cblx0XHRAaGVhZCA9IG5ldyBBdHRyYWN0b3IzZCgxMCwnaGVhZCcpXG5cdFx0QGhlYWQuYmFzZVBvc2l0aW9uLnNldCgwLDUwLDMwKVxuXG5cdFx0QGJvZHkgPSBuZXcgQXR0cmFjdG9yM2QoNTAsJ2JvZHknKVxuXHRcdEBib2R5LmJhc2VQb3NpdGlvbi5zZXQoMCwyNSwwKVxuXG5cdFx0QHNob3VsZGVyTGVmdCA9IG5ldyBBdHRyYWN0b3IzZCg1LCdzaG91bGRlckxlZnQnKVxuXHRcdEBzaG91bGRlckxlZnQuYmFzZVBvc2l0aW9uLnNldCgtNTAsNTAsMClcblxuXHRcdEBzaG91bGRlclJpZ2h0ID0gbmV3IEF0dHJhY3RvcjNkKDUsJ3Nob3VsZGVyUmlnaHQnKVxuXHRcdEBzaG91bGRlclJpZ2h0LmJhc2VQb3NpdGlvbi5zZXQoNTAsNTAsMClcblxuXHRcdEBoYW5kTGVmdCA9IG5ldyBBdHRyYWN0b3IzZCg1LCdoYW5kTGVmdCcpXG5cdFx0QGhhbmRMZWZ0LmJhc2VQb3NpdGlvbi5zZXQoLTc1LC01LDApXG5cblx0XHRAaGFuZFJpZ2h0ID0gbmV3IEF0dHJhY3RvcjNkKDUsJ2hhbmRSaWdodCcpXG5cdFx0QGhhbmRSaWdodC5iYXNlUG9zaXRpb24uc2V0KDc1LC01LDApXG5cblx0XHRAZWxib3dMZWZ0ID0gbmV3IEF0dHJhY3RvcjNkKDUsJ2VsYm93TGVmdCcpXG5cdFx0QGVsYm93TGVmdC5iYXNlUG9zaXRpb24uc2V0KC03MCwyMCwtNSlcblxuXHRcdEBlbGJvd1JpZ2h0ID0gbmV3IEF0dHJhY3RvcjNkKDUsJ2VsYm93UmlnaHQnKVxuXHRcdEBlbGJvd1JpZ2h0LmJhc2VQb3NpdGlvbi5zZXQoNzAsMjAsLTUpXG5cblx0XHRAYm9kaWVzID0gW0BoZWFkLCBAYm9keSwgQHNob3VsZGVyTGVmdCwgQHNob3VsZGVyUmlnaHQsIEBoYW5kTGVmdCwgQGhhbmRSaWdodCwgQGVsYm93UmlnaHQsIEBlbGJvd0xlZnRdXG5cblx0XHRmb3IgYiBpbiBAYm9kaWVzXG5cdFx0XHRmb2xkZXIgPSBndWkuYWRkRm9sZGVyKGIubmFtZSlcblx0XHRcdGZvbGRlci5hZGQoYi5iYXNlUG9zaXRpb24sJ3gnLC0xMDAsMTAwKS5zdGVwKDEpLm5hbWUoJ2Jhc2UgeCcpXG5cdFx0XHRmb2xkZXIuYWRkKGIuYmFzZVBvc2l0aW9uLCd5JywtMTAwLDEwMCkuc3RlcCgxKS5uYW1lKCdiYXNlIHknKVxuXHRcdFx0Zm9sZGVyLmFkZChiLmJhc2VQb3NpdGlvbiwneicsLTEwMCwxMDApLnN0ZXAoMSkubmFtZSgnYmFzZSB6Jylcblx0XHRcdFN0YWdlM2QuYWRkKGIpXG5cdFx0XHRmb2xkZXIuY2xvc2UoKVxuXG5cdFx0cmV0dXJuXG5cblx0dXBkYXRlOihkdCktPlxuXHRcdGZvciBiIGluIEBib2RpZXNcblx0XHRcdGIudXBkYXRlKGR0LEBzY2FsZVkpXG5cdFx0cmV0dXJuIl19