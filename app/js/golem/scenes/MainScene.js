var MainScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MainScene = (function(_super) {
  __extends(MainScene, _super);

  function MainScene() {
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onKeyUp = __bind(this.onKeyUp, this);
    this.onKeyDown = __bind(this.onKeyDown, this);
    var ambientLight, angle, b, eyeLeftLight, eyeRightLight, forest, geometry, i, j, jizz, particleMaterial, phi, plane, pointLight, radius, ratio, stone, theta, v, vertex, vertices, _i, _j, _k, _l, _len, _m, _ref, _ref1, _ref2, _ref3;
    this.timeGolem = 0;
    this.time = 0;
    this.tickResetSound = 0;
    Physics.init();
    Stage3d.scene.fog = new THREE.FogExp2(0, 0.0025);
    Stage3d.postprocessing.oclScene.fog = Stage3d.scene.fog;
    ambientLight = new THREE.AmbientLight(0x111116);
    pointLight = new THREE.PointLight(0xCCCCFF, 3, 120);
    pointLight.position.set(0, 100, 0);
    Forest.init();
    forest = new Forest();
    Stage3d.add(forest);
    Stage3d.add(ambientLight);
    Stage3d.add(pointLight);
    geometry = new THREE.PlaneGeometry(600, 2000, 50, 50);
    vertices = geometry.vertices;
    jizz = 2;
    for (i = _i = 0, _ref = vertices.length; _i < _ref; i = _i += 1) {
      v = vertices[i];
      v.x += (Math.random() - .5) * jizz;
      v.z += (Math.random() - .5) * jizz;
      v.y += (Math.random() - .5) * jizz;
    }
    plane = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({
      map: Data.textures['ice01.jpg'],
      envMap: Data.textures.reflectionMap,
      color: 0xFFFFFF
    }));
    plane.rotation.x = -Math.PI / 2;
    Stage3d.add(plane);
    geometry = new THREE.PlaneGeometry(200, 200, 50, 50);
    vertices = geometry.vertices;
    jizz = 2;
    for (i = _j = 0, _ref1 = vertices.length; _j < _ref1; i = _j += 1) {
      v = vertices[i];
      v.x += (Math.random() - .5) * jizz;
      v.z += (Math.random() - .5) * jizz;
      v.y += (Math.random() - .5) * jizz;
    }
    plane = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({
      map: Data.textures['ice01.jpg'],
      envMap: Data.textures.reflectionMap,
      color: 0xFFFFFF
    }));
    plane.rotation.x = -Math.PI / 2;
    Stage3d.add(plane);
    this.lightAura = new LightAura();
    Stage3d.add(this.lightAura);
    ratio = .3;
    this.head = new Attractor3d(10 * ratio, 'head', 1, 2, 0, 0.0005, .3);
    this.head.basePosition.set(0, 45 * ratio, 40 * ratio);
    this.body = new Attractor3d(50 * ratio, 'body', 100, 1, 10, 0.0005, 1);
    this.body.basePosition.set(0, 25 * ratio, 0);
    this.shoulderLeft = new Attractor3d(5 * ratio, 'shoulderLeft', 4, 1.3, 1.5, 0.001, 1.5);
    this.shoulderLeft.basePosition.set(-50 * ratio, 50 * ratio, 0);
    this.shoulderRight = new Attractor3d(5 * ratio, 'shoulderRight', 4, 1.3, 1.5, 0.001, 1.5);
    this.shoulderRight.basePosition.set(50 * ratio, 50 * ratio, 0);
    this.handLeft = new Attractor3d(5 * ratio, 'handLeft', 7, .8, 2.5, 0.0001, 1);
    this.handLeft.basePosition.set(-75 * ratio, -5 * ratio, 0);
    this.handRight = new Attractor3d(5 * ratio, 'handRight', 7, .8, 2.5, 0.0001, 1);
    this.handRight.basePosition.set(75 * ratio, -5 * ratio, 0);
    this.elbowLeft = new Attractor3d(5 * ratio, 'elbowLeft', 4, .6, 1.4, 0.0001, .7);
    this.elbowLeft.basePosition.set(-70 * ratio, 20 * ratio, -5 * ratio);
    this.elbowRight = new Attractor3d(5 * ratio, 'elbowRight', 4, .6, 1.4, 0.0001, .7);
    this.elbowRight.basePosition.set(70 * ratio, 20 * ratio, -5 * ratio);
    this.bodies = [this.head, this.body, this.shoulderLeft, this.shoulderRight, this.handLeft, this.handRight, this.elbowRight, this.elbowLeft];
    this.stones = [];
    this.occlusionLights = [];
    this.occLightScale = 0.01;
    _ref2 = this.bodies;
    for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
      b = _ref2[_k];
      b.calculateDistance();
      Stage3d.add(b);
      b.update(0, 1.4, 0);
      for (j = _l = 0, _ref3 = b.stonesRequire; _l < _ref3; j = _l += 1) {
        angle = Math.PI * 2 * Math.random();
        radius = 40 + 100 * Math.random();
        stone = new Stone(null, Math.cos(angle) * radius, 0, Math.sin(angle) * radius, b.scaleStone);
        stone.target = b.target;
        Stage3d.add(stone);
        Stage3d.addOclusion(stone.occlusion);
        stone.scale.multiplyScalar(.4 + .1 * Math.random());
        this.stones.push(stone);
        if (b === this.head) {
          stone.material.depthWrite = false;
        }
      }
      if (b.scaleLight > 0) {
        b.occlusionLight = new THREE.Mesh(new THREE.SphereGeometry(b.scaleLight, 4), new THREE.MeshBasicMaterial({
          color: 0x0000FF
        }));
        b.occlusionLight.position.copy(b.position);
        Stage3d.addOclusion(b.occlusionLight);
        this.occlusionLights.push(b.occlusionLight);
      }
    }
    eyeRightLight = new THREE.PointLight(0xFF0000, 3, 3);
    eyeRightLight.position.set(-1.3, 33, 17);
    Stage3d.add(eyeRightLight);
    eyeLeftLight = new THREE.PointLight(0xFF0000, 3, 3);
    eyeLeftLight.position.set(1.3, 33, 17);
    Stage3d.add(eyeLeftLight);
    geometry = new THREE.SphereGeometry(.2);
    this.materialEye = new THREE.MeshBasicMaterial({
      transparent: true,
      opacity: .7,
      color: 0x222299
    });
    this.eyeLeft = new THREE.Mesh(geometry, this.materialEye);
    this.eyeLeft.position.copy(eyeLeftLight.position);
    this.eyeLeft.position.z -= 1;
    Stage3d.add(this.eyeLeft);
    this.eyeRight = new THREE.Mesh(geometry, this.materialEye);
    this.eyeRight.position.copy(eyeRightLight.position);
    this.eyeRight.position.z -= 1;
    Stage3d.add(this.eyeRight);
    this.source = new Source();
    this.source.position.y = 25;
    Stage3d.add(this.source);
    this.temple = new Temple();
    geometry = new THREE.Geometry();
    for (i = _m = 0; _m < 30; i = _m += 1) {
      vertex = new THREE.Vector3();
      phi = Math.random() * Math.PI * 2;
      theta = Math.random() * Math.PI * 2;
      radius = 90 + Math.random() * 40;
      vertex.x = radius * Math.sin(phi) * Math.cos(theta);
      vertex.y = radius * Math.cos(phi);
      vertex.z = radius * Math.sin(phi) * Math.sin(theta);
      geometry.vertices.push(vertex);
    }
    particleMaterial = new THREE.PointCloudMaterial({
      opacity: 1,
      color: 0xFFFFFF,
      size: 2,
      map: Data.textures['particle_tex_01.jpg'],
      blending: THREE.AdditiveBlending,
      depthWrite: false,
      transparent: true
    });
    this.particles = new THREE.PointCloud(geometry, particleMaterial);
    this.particles.rotation.y = Math.random() * 6;
    Stage3d.add(this.particles);
    this.cameraFree = false;
    Stage3d.camera.position.set(0, 20, 1000);
    TweenLite.to(Stage3d.camera.position, 7, {
      z: 140,
      ease: Quad.easeOut,
      onComplete: (function(_this) {
        return function() {
          _this.cameraFree = true;
          Data.sounds.nature.play();
          TweenLite.from(Data.sounds.nature, 2.5, {
            volume: 0
          });
          return Instruction.show();
        };
      })(this)
    });
    this.mouse = new THREE.Vector2(window.innerWidth / 2, window.innerHeight / 2);
    this.angle = Math.PI / 2;
    this.radius = 140;
    window.addEventListener('mousemove', this.onMouseMove);
    window.addEventListener('mousedown', this.onKeyDown);
    window.addEventListener('mouseup', this.onKeyUp);
    window.addEventListener('touchstart', this.onKeyDown);
    window.addEventListener('touchend', this.onKeyUp);
    this.golem = false;
    this.golemAngle = 0;
    window.addEventListener('keyup', this.onKeyUp);
    window.addEventListener('keydown', this.onKeyDown);
    Physics.update();
    Title.hide();
    return;
  }

  MainScene.prototype.onKeyDown = function(e) {
    if (this.cameraFree) {
      this.golem = true;
      Physics.world.gravity = new OIMO.Vec3(0, 0, 0);
    }
  };

  MainScene.prototype.onKeyUp = function(e) {
    if (this.cameraFree) {
      this.golem = false;
      Physics.world.gravity = new OIMO.Vec3(0, -9.8 / 100, 0);
    }
  };

  MainScene.prototype.onMouseMove = function(e) {
    this.mouse.x = e.clientX || e.x;
    this.mouse.y = e.clientY || e.y;
  };

  MainScene.prototype.update = function(dt) {
    var b, light, stone, targetBody, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    this.tickResetSound += dt;
    if (this.tickResetSound > 250) {
      this.tickResetSound = 0;
      Stone.soundsPlay = 0;
      console.log('reset');
    }
    if (dt > 100) {
      return;
    }
    Physics.update();
    if (this.time < 250) {
      this.time += dt;
      return;
    }
    if (this.cameraFree) {
      this.angle -= (this.mouse.x / window.innerWidth - .5) * 0.02;
      Stage3d.camera.position.x = Math.cos(this.angle) * this.radius;
      Stage3d.camera.position.z = Math.sin(this.angle) * this.radius;
      Stage3d.camera.rotation.y = Math.atan2(-Stage3d.camera.position.z, Stage3d.camera.position.x) + Math.PI / 2;
      Stage3d.camera.rotation.x += (((1 - this.mouse.y / window.innerHeight) * .3 - .1) - Stage3d.camera.rotation.x) * .03;
    }
    this.lightAura.update(dt);
    this.source.update(dt);
    _ref = this.bodies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      b = _ref[_i];
      b.update(dt, 1.4, this.golemAngle);
      if (b.occlusionLight) {
        b.occlusionLight.position.copy(b.position);
      }
    }
    targetBody = new THREE.Vector3(0, .25, 0);
    _ref1 = this.stones;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      stone = _ref1[_j];
      stone.update(dt, this.golem);
    }
    _ref2 = this.occlusionLights;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      light = _ref2[_k];
      light.scale.set(this.occLightScale, this.occLightScale, this.occLightScale);
      this.materialEye.opacity = this.occLightScale * .7;
    }
    if (this.golem) {
      this.timeGolem += dt;
      if (this.timeGolem > 700) {
        this.occLightScale += (1 - this.occLightScale) * 0.015;
      }
      this.radius += (80 - this.radius) * .01;
      Data.sounds.thunder.volume((2 - Data.sounds.thunder.volume()) * 0.05);
    } else {
      this.timeGolem = 0;
      this.occLightScale += (0 - this.occLightScale) * 0.25;
      this.radius += (140 - this.radius) * .05;
      Data.sounds.thunder.volume((0 - Data.sounds.thunder.volume()) * 0.15);
    }
    this.particles.rotation.y += dt / 9000;
    this.particles.rotation.z += dt / 9000;
  };

  return MainScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,