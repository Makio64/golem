var MainScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MainScene = (function(_super) {
  __extends(MainScene, _super);

  function MainScene() {
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onKeyUp = __bind(this.onKeyUp, this);
    this.onKeyDown = __bind(this.onKeyDown, this);
    var ambientLight, angle, b, forest, geometry, i, j, jizz, plane, pointLight, radius, ratio, stone, v, vertices, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3;
    Physics.init();
    Stage3d.scene.fog = new THREE.FogExp2(0, 0.0025);
    ambientLight = new THREE.AmbientLight(0x111116);
    pointLight = new THREE.PointLight(0xCCCCFF, 3, 120);
    pointLight.position.set(0, 100, 0);
    Forest.init();
    forest = new Forest();
    Stage3d.add(forest);
    Stage3d.add(ambientLight);
    Stage3d.add(pointLight);
    geometry = new THREE.PlaneGeometry(1000, 1000, 200, 200);
    vertices = geometry.vertices;
    jizz = 2;
    for (i = _i = 0, _ref = vertices.length; _i < _ref; i = _i += 1) {
      v = vertices[i];
      v.x += (Math.random() - .5) * jizz;
      v.z += (Math.random() - .5) * jizz;
      v.y += (Math.random() - .5) * jizz;
    }
    plane = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({
      map: Data.textures['ice01.jpg'],
      envMap: Data.textures.reflectionMap,
      color: 0xFFFFFF
    }));
    plane.rotation.x = -Math.PI / 2;
    Stage3d.add(plane);
    geometry = new THREE.PlaneGeometry(200, 200, 50, 50);
    vertices = geometry.vertices;
    jizz = 2;
    for (i = _j = 0, _ref1 = vertices.length; _j < _ref1; i = _j += 1) {
      v = vertices[i];
      v.x += (Math.random() - .5) * jizz;
      v.z += (Math.random() - .5) * jizz;
      v.y += (Math.random() - .5) * jizz;
    }
    plane = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({
      map: Data.textures['ice01.jpg'],
      envMap: Data.textures.reflectionMap,
      color: 0xFFFFFF
    }));
    plane.rotation.x = -Math.PI / 2;
    Stage3d.add(plane);
    this.lightAura = new LightAura();
    Stage3d.add(this.lightAura);
    ratio = .3;
    this.head = new Attractor3d(10 * ratio, 'head', 1, 2);
    this.head.basePosition.set(0, 45 * ratio, 40 * ratio);
    this.body = new Attractor3d(50 * ratio, 'body', 100, 1);
    this.body.basePosition.set(0, 25 * ratio, 0);
    this.shoulderLeft = new Attractor3d(5 * ratio, 'shoulderLeft', 4, 1.3);
    this.shoulderLeft.basePosition.set(-50 * ratio, 50 * ratio, 0);
    this.shoulderRight = new Attractor3d(5 * ratio, 'shoulderRight', 4, 1.3);
    this.shoulderRight.basePosition.set(50 * ratio, 50 * ratio, 0);
    this.handLeft = new Attractor3d(5 * ratio, 'handLeft', 7, .8);
    this.handLeft.basePosition.set(-75 * ratio, -5 * ratio, 0);
    this.handRight = new Attractor3d(5 * ratio, 'handRight', 7, .8);
    this.handRight.basePosition.set(75 * ratio, -5 * ratio, 0);
    this.elbowLeft = new Attractor3d(5 * ratio, 'elbowLeft', 4, .6);
    this.elbowLeft.basePosition.set(-70 * ratio, 20 * ratio, -5 * ratio);
    this.elbowRight = new Attractor3d(5 * ratio, 'elbowRight', 4, .6);
    this.elbowRight.basePosition.set(70 * ratio, 20 * ratio, -5 * ratio);
    this.bodies = [this.head, this.body, this.shoulderLeft, this.shoulderRight, this.handLeft, this.handRight, this.elbowRight, this.elbowLeft];
    this.stones = [];
    _ref2 = this.bodies;
    for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
      b = _ref2[_k];
      Stage3d.add(b);
      b.update(0, 1.4);
      for (j = _l = 0, _ref3 = b.stonesRequire; _l < _ref3; j = _l += 1) {
        angle = Math.PI * 2 * Math.random();
        radius = 40 + 100 * Math.random();
        stone = new Stone(null, Math.cos(angle) * radius, 0, Math.sin(angle) * radius, b.scaleStone);
        stone.target = b.target;
        Stage3d.add(stone);
        stone.scale.multiplyScalar(.4 + .1 * Math.random());
        this.stones.push(stone);
      }
    }
    this.source = new Source();
    this.source.position.y = 25;
    Stage3d.add(this.source);
    this.temple = new Temple();
    this.cameraFree = false;
    Stage3d.camera.position.set(0, 20, 2000);
    TweenLite.to(Stage3d.camera.position, 6, {
      z: 140,
      ease: Quad.easeOut,
      onComplete: (function(_this) {
        return function() {
          return _this.cameraFree = true;
        };
      })(this)
    });
    this.mouse = new THREE.Vector2(window.innerWidth / 2, window.innerHeight / 2);
    this.angle = Math.PI / 2;
    this.radius = 140;
    window.addEventListener('mousemove', this.onMouseMove);
    this.golem = false;
    window.addEventListener('keyup', this.onKeyUp);
    window.addEventListener('keydown', this.onKeyDown);
    return;
  }

  MainScene.prototype.onKeyDown = function(e) {
    this.golem = true;
    Physics.world.gravity = new OIMO.Vec3(0, 0, 0);
  };

  MainScene.prototype.onKeyUp = function(e) {
    this.golem = false;
    Physics.world.gravity = new OIMO.Vec3(0, -9.8 / 100, 0);
  };

  MainScene.prototype.onMouseMove = function(e) {
    this.mouse.x = e.clientX || e.x;
    this.mouse.y = e.clientY || e.y;
  };

  MainScene.prototype.update = function(dt) {
    var radius, stone, targetBody, _i, _len, _ref;
    radius = 140;
    if (this.cameraFree) {
      this.angle -= (this.mouse.x / window.innerWidth - .5) * 0.01;
      Stage3d.camera.position.x = Math.cos(this.angle) * radius;
      Stage3d.camera.position.z = Math.sin(this.angle) * radius;
      Stage3d.camera.rotation.y = Math.atan2(-Stage3d.camera.position.z, Stage3d.camera.position.x) + Math.PI / 2;
    }
    Stage3d.camera.rotation.x += (((1 - this.mouse.y / window.innerHeight) * .3 - .1) - Stage3d.camera.rotation.x) * .03;
    this.lightAura.update(dt);
    this.source.update(dt);
    Physics.update();
    targetBody = new THREE.Vector3(0, .25, 0);
    _ref = this.stones;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      stone = _ref[_i];
      stone.update(dt, this.golem);
    }
  };

  return MainScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,