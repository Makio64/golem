var LoaderScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoaderScene = (function(_super) {
  __extends(LoaderScene, _super);

  function LoaderScene() {
    this.onComplete = __bind(this.onComplete, this);
    this.onLoaded = __bind(this.onLoaded, this);
    this.loadTexture = __bind(this.loadTexture, this);
    this.queue = 0;
    Title.show();
    this.loadSound();
    setTimeout((function(_this) {
      return function() {
        return ShaderLoader.load(['tree', 'source', 'temple', 'vBlur', 'hBlur'], _this.loadTexture);
      };
    })(this), 400);
    return;
  }

  LoaderScene.prototype.loadSound = function() {
    Data.sounds.music = new Howl({
      urls: ['sounds/day1.mp3'],
      autoplay: true,
      loop: true,
      volume: 0.1,
      buffer: true
    });
    Data.sounds.nature = new Howl({
      urls: ['sounds/wind.mp3'],
      autoplay: false,
      loop: true,
      volume: 0.4,
      buffer: true
    });
    Data.sounds.thunder = new Howl({
      urls: ['sounds/thunder.mp3'],
      loop: true,
      volume: 0.0,
      autoplay: true
    });
  };

  LoaderScene.prototype.loadTexture = function() {
    var name, url, urls, _i, _len;
    Title.setPercent(.3);
    Stage3d.initPostprocessing();
    urls = ["textures/light.png", "textures/ice01.jpg", "textures/ice02.jpg", "textures/particle_tex_01.jpg"];
    for (_i = 0, _len = urls.length; _i < _len; _i++) {
      url = urls[_i];
      this.queue++;
      name = this.getName(url);
      Data.textures[name] = THREE.ImageUtils.loadTexture(url, THREE.UVMapping, this.onLoaded);
    }
  };

  LoaderScene.prototype.onLoaded = function() {
    this.queue--;
    if (this.queue <= 0) {
      this.onComplete();
    }
  };

  LoaderScene.prototype.onComplete = function() {
    var format, path, urls;
    Title.setPercent(.7);
    path = "textures/env01/";
    format = '.jpg';
    urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'posz' + format, path + 'negz' + format];
    Data.textures.reflectionCube = THREE.ImageUtils.loadTextureCube(urls);
    Data.textures.reflectionCube.format = THREE.RGBFormat;
    THREE.ImageUtils.loadTextureCube(urls, THREE.CubeReflectionMapping, function() {
      Title.setPercent(.99);
      return SceneTraveler.to(new MainScene());
    });
  };

  LoaderScene.prototype.getName = function(url) {
    var filename, index;
    index = url.lastIndexOf("/") + 1;
    filename = url.substr(index);
    return filename;
  };

  return LoaderScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtL3NjZW5lcy9Mb2FkZXJTY2VuZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxXQUFBO0VBQUE7O2lTQUFBOztBQUFBO0FBRUMsZ0NBQUEsQ0FBQTs7QUFBWSxFQUFBLHFCQUFBLEdBQUE7QUFDWCxtREFBQSxDQUFBO0FBQUEsK0NBQUEsQ0FBQTtBQUFBLHFEQUFBLENBQUE7QUFBQSxJQUFBLElBQUMsQ0FBQSxLQUFELEdBQVMsQ0FBVCxDQUFBO0FBQUEsSUFDQSxLQUFLLENBQUMsSUFBTixDQUFBLENBREEsQ0FBQTtBQUFBLElBR0EsSUFBQyxDQUFBLFNBQUQsQ0FBQSxDQUhBLENBQUE7QUFBQSxJQUtBLFVBQUEsQ0FBVyxDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQSxHQUFBO2VBQ1YsWUFBWSxDQUFDLElBQWIsQ0FBa0IsQ0FDakIsTUFEaUIsRUFFakIsUUFGaUIsRUFHakIsUUFIaUIsRUFJakIsT0FKaUIsRUFLakIsT0FMaUIsQ0FBbEIsRUFNRSxLQUFDLENBQUEsV0FOSCxFQURVO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWCxFQVFDLEdBUkQsQ0FMQSxDQUFBO0FBY0EsVUFBQSxDQWZXO0VBQUEsQ0FBWjs7QUFBQSx3QkFrQkEsU0FBQSxHQUFVLFNBQUEsR0FBQTtBQUNULElBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFaLEdBQXdCLElBQUEsSUFBQSxDQUFLO0FBQUEsTUFDNUIsSUFBQSxFQUFNLENBQUMsaUJBQUQsQ0FEc0I7QUFBQSxNQUU1QixRQUFBLEVBQVUsSUFGa0I7QUFBQSxNQUc1QixJQUFBLEVBQU0sSUFIc0I7QUFBQSxNQUk1QixNQUFBLEVBQVEsR0FKb0I7QUFBQSxNQUs1QixNQUFBLEVBQVEsSUFMb0I7S0FBTCxDQUF4QixDQUFBO0FBQUEsSUFRQSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQVosR0FBeUIsSUFBQSxJQUFBLENBQUs7QUFBQSxNQUM3QixJQUFB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QyxHQUFELEdBQUE7QUFDUCxRQUFBLGVBQUE7QUFBQSxJQUFBLEtBQUEsR0FBUSxHQUFHLENBQUMsV0FBSixDQUFnQixHQUFoQixDQUFBLEdBQXVCLENBQS9CLENBQUE7QUFBQSxJQUNBLFFBQUEsR0FBVyxHQUFHLENBQUMsTUFBSixDQUFXLEtBQVgsQ0FEWCxDQUFBO0FBRUEsV0FBTyxRQUFQLENBSE87RUFBQSxDQTNHUixDQUFBOztxQkFBQTs7R0FGeUIsTUFBMUIsQ0FBQSIsImZpbGUiOiJnb2xlbS9zY2VuZXMvTG9hZGVyU2NlbmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBMb2FkZXJTY2VuZSBleHRlbmRzIFNjZW5lXG5cblx0Y29uc3RydWN0b3I6KCktPlxuXHRcdEBxdWV1ZSA9IDBcblx0XHRUaXRsZS5zaG93KClcblxuXHRcdEBsb2FkU291bmQoKVxuXG5cdFx0c2V0VGltZW91dCgoKT0+XG5cdFx0XHRTaGFkZXJMb2FkZXIubG9hZChbXG5cdFx0XHRcdCd0cmVlJ1xuXHRcdFx0XHQnc291cmNlJ1xuXHRcdFx0XHQndGVtcGxlJ1xuXHRcdFx0XHQndkJsdXInXG5cdFx0XHRcdCdoQmx1cidcblx0XHRcdF0sQGxvYWRUZXh0dXJlKVxuXHRcdCw0MDApXG5cdFx0cmV0dXJuXG5cblxuXHRsb2FkU291bmQ6KCktPlxuXHRcdERhdGEuc291bmRzLm11c2ljID0gbmV3IEhvd2woe1xuXHRcdFx0dXJsczogWydzb3VuZHMvZGF5MS5tcDMnXSxcblx0XHRcdGF1dG9wbGF5OiB0cnVlLFxuXHRcdFx0bG9vcDogdHJ1ZSxcblx0XHRcdHZvbHVtZTogMC4xLFxuXHRcdFx0YnVmZmVyOiB0cnVlXG5cdFx0fSlcblxuXHRcdERhdGEuc291bmRzLm5hdHVyZSA9IG5ldyBIb3dsKHtcblx0XHRcdHVybHM6IFsnc291bmRzL3dpbmQubXAzJ10sXG5cdFx0XHRhdXRvcGxheTogZmFsc2UsXG5cdFx0XHRsb29wOiB0cnVlLFxuXHRcdFx0dm9sdW1lOiAwLjQsXG5cdFx0XHRidWZmZXI6IHRydWVcblx0XHR9KVxuXG5cdFx0RGF0YS5zb3VuZHMudGh1bmRlciA9IG5ldyBIb3dsKHtcblx0XHRcdHVybHM6IFsnc291bmRzL3RodW5kZXIubXAzJ10sXG5cdFx0XHRsb29wOiB0cnVlLFxuXHRcdFx0dm9sdW1lOiAwLjAsXG5cdFx0XHRhdXRvcGxheTogdHJ1ZVx0XHRcdFxuXHRcdH0pXG5cblx0XHQjIERhdGEuc291bmRzLnN0b25lSGl0MSA9IG5ldyBIb3dsKHtcblx0XHQjIFx0dXJsczogWydzb3VuZHMvc3RvbmVJbXBhY3RfMDEubXAzJ10sXG5cdFx0IyBcdGxvb3A6IGZhbHNlLFxuXHRcdCMgXHR2b2x1bWU6IC4xLFx0XHRcdFxuXHRcdCMgfSlcblxuXHRcdCMgRGF0YS5zb3VuZHMuc3RvbmVIaXQyID0gbmV3IEhvd2woe1xuXHRcdCMgXHR1cmxzOiBbJ3NvdW5kcy9zdG9uZUltcGFjdF8wMi5tcDMnXSxcblx0XHQjIFx0bG9vcDogZmFsc2UsXG5cdFx0IyBcdHZvbHVtZTogLjEsXHRcdFx0XG5cdFx0IyB9KVxuXG5cdFx0IyBEYXRhLnNvdW5kcy5zdG9uZUhpdDMgPSBuZXcgSG93bCh7XG5cdFx0IyBcdHVybHM6IFsnc291bmRzL3N0b25lSW1wYWN0XzAzLm1wMyddLFxuXHRcdCMgXHRsb29wOiBmYWxzZSxcblx0XHQjIFx0dm9sdW1lOiAuMSxcdFx0XHRcblx0XHQjIH0pXG5cdFx0cmV0dXJuXG5cblxuXHRsb2FkVGV4dHVyZTooKT0+XG5cdFx0VGl0bGUuc2V0UGVyY2VudCguMylcblx0XHRTdGFnZTNkLmluaXRQb3N0cHJvY2Vzc2luZygpXG5cdFx0dXJscyA9IFtcblx0XHRcdFwidGV4dHVyZXMvbGlnaHQucG5nXCJcblx0XHRcdFwidGV4dHVyZXMvaWNlMDEuanBnXCJcblx0XHRcdFwidGV4dHVyZXMvaWNlMDIuanBnXCJcblx0XHRcdFwidGV4dHVyZXMvcGFydGljbGVfdGV4XzAxLmpwZ1wiXG5cdFx0XHQjIFwidGV4dHVyZXMvd2F0ZXIuanBnXCJcblx0XHRcdCMgXCJ0ZXh0dXJlcy90ZW1wbGUucG5nXCJcblx0XHRdXG5cdFx0Zm9yIHVybCBpbiB1cmxzXG5cdFx0XHRAcXVldWUrK1xuXHRcdFx0bmFtZSA9IEBnZXROYW1lKHVybClcblx0XHRcdERhdGEudGV4dHVyZXNbbmFtZV0gPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKHVybCwgVEhSRUUuVVZNYXBwaW5nLCBAb25Mb2FkZWQpXG5cdFx0cmV0dXJuXG5cblx0b25Mb2FkZWQ6KCk9PlxuXHRcdEBxdWV1ZS0tXG5cdFx0aWYoQHF1ZXVlIDw9IDApXG5cdFx0XHRAb25Db21wbGV0ZSgpXG5cdFx0cmV0dXJuXG5cblx0b25Db21wbGV0ZTooKT0+XG5cdFx0VGl0bGUuc2V0UGVyY2VudCguNylcblx0XHRwYXRoID0gXCJ0ZXh0dXJlcy9lbnYwMS9cIjtcblx0XHRmb3JtYXQgPSAnLmpwZyc7XG5cdFx0dXJscyA9IFtcblx0XHRcdHBhdGggKyAncG9zeCcgKyBmb3JtYXRcblx0XHRcdHBhdGggKyAnbmVneCcgKyBmb3JtYXRcblx0XHRcdHBhdGggKyAncG9zeScgKyBmb3JtYXQgXG5cdFx0XHRwYXRoICsgJ25lZ3knICsgZm9ybWF0XG5cdFx0XHRwYXRoICsgJ3Bvc3onICsgZm9ybWF0IFxuXHRcdFx0cGF0aCArICduZWd6JyArIGZvcm1hdFxuXHRcdF07XG5cblxuXHRcdERhdGEudGV4dHVyZXMucmVmbGVjdGlvbkN1YmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSggdXJscyApO1xuXHRcdERhdGEudGV4dHVyZXMucmVmbGVjdGlvbkN1YmUuZm9ybWF0ID0gVEhSRUUuUkdCRm9ybWF0O1xuXHRcdFRIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmVDdWJlKHVybHMsIFRIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZywgKCktPlxuXHRcdFx0VGl0bGUuc2V0UGVyY2VudCguOTkpXG5cdFx0XHRTY2VuZVRyYXZlbGVyLnRvKG5ldyBNYWluU2NlbmUoKSlcblx0XHQpXG5cdFx0cmV0dXJuXG5cblx0Z2V0TmFtZToodXJsKS0+XG5cdFx0aW5kZXggPSB1cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMTtcblx0XHRmaWxlbmFtZSA9IHVybC5zdWJzdHIoaW5kZXgpO1xuXHRcdHJldHVybiBmaWxlbmFtZSJdfQ==