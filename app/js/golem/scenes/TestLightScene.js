var TestLightScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TestLightScene = (function(_super) {
  __extends(TestLightScene, _super);

  function TestLightScene() {
    this.update = __bind(this.update, this);
    this.positionLight = __bind(this.positionLight, this);
    this.generateLight = __bind(this.generateLight, this);
    var gui;
    Stage3d.cameraTarget.z = 200;
    Stage3d.cameraTarget.y = 0;
    this.lightCount = 10;
    this.lights = [];
    this.radius = 100;
    this.ambient = new THREE.AmbientLight(0x111111);
    this.targetLookAt = new THREE.Vector3(-Math.PI / 2, 0.2, 0);
    this.opacity = .3;
    this.offsetX = 85;
    this.offsetY = 280;
    Stage3d.camera.position.z = 150;
    gui = new dat.GUI();
    gui.add(this, 'lightCount', 1, 100).step(1).onChange(this.generateLight);
    gui.add(this, 'radius', 1, 1000).step(1).onChange(this.generateLight);
    gui.add(this.targetLookAt, 'x', -Math.PI, Math.PI).step(0.01);
    gui.add(this.targetLookAt, 'y', -Math.PI, Math.PI).step(0.01);
    gui.add(this.targetLookAt, 'z', -Math.PI, Math.PI).step(0.01);
    gui.add(Stage3d.camera.position, 'x', -200, 400).step(0.01);
    gui.add(Stage3d.camera.position, 'y', -200, 400).step(0.01);
    gui.add(Stage3d.camera.position, 'z', -200, 400).step(0.01);
    gui.add(this, 'offsetX', -500, 500).step(1).onChange(this.generateLight);
    gui.add(this, 'offsetY', -500, 500).step(1).onChange(this.generateLight);
    gui.add(this, 'opacity', 0, 1).step(0.1);
    gui.add(Stage3d.scene.rotation, 'y', 0, Math.PI * 2);
    this.opacity;
    this.generateLight();
    return;
  }

  TestLightScene.prototype.generateLight = function() {
    var l, _i, _len, _ref;
    while (this.lights.length < this.lightCount) {
      l = new Light();
      this.lights.push(l);
      this.positionLight(l);
      Stage3d.add(l);
    }
    while (this.lights.length > this.lightCount) {
      l = this.lights.pop();
      Stage3d.remove(l);
    }
    _ref = this.lights;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      this.positionLight(l);
    }
  };

  TestLightScene.prototype.positionLight = function(l) {
    var angle, r;
    angle = Math.random() * Math.PI * 2;
    r = this.radius * Math.random();
    l.position.x = Math.cos(angle) * r + this.offsetX;
    l.position.z = Math.sin(angle) * r;
    l.position.y = this.offsetY;
  };

  TestLightScene.prototype.update = function(dt) {
    var l, quaternion, quaternion2, _i, _len, _ref;
    quaternion = new THREE.Quaternion();
    quaternion2 = new THREE.Quaternion();
    quaternion.setFromAxisAngle(new THREE.Vector3(1, 0, 0), this.targetLookAt.x);
    quaternion.multiply(quaternion2);
    quaternion2.setFromAxisAngle(new THREE.Vector3(0, 1, 0), this.targetLookAt.y);
    quaternion.multiply(quaternion2);
    quaternion2.setFromAxisAngle(new THREE.Vector3(0, 0, 1), this.targetLookAt.z);
    quaternion.multiply(quaternion2);
    quaternion.normalize();
    _ref = this.lights;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      l.update(dt);
      l._opacity = this.opacity;
      l.setRotationFromQuaternion(quaternion);
    }
  };

  return TestLightScene;

})(Scene);

//# sourceMappingURL=data:application/json;base64,