var Stone,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Stone = (function(_super) {
  __extends(Stone, _super);

  Stone.soundsPlay = 0;

  function Stone(type, x, y, z, scale) {
    var geometry, height, i, jizz, material, obj, radius, size, v, vertices, _i, _j, _k, _ref, _ref1, _ref2;
    type = 1;
    this.fly = false;
    this.positionnated = false;
    switch (type) {
      case 0:
        size = 5.5 * scale;
        obj = {
          type: 'box',
          size: [size, size, size],
          pos: [x, y, z],
          move: true,
          world: Physics.world
        };
        geometry = new THREE.BoxGeometry(size, size, size, 2, 2, 2);
        material = new THREE.MeshLambertMaterial({
          color: 0xFFFFFF,
          wireframe: false
        });
        vertices = geometry.vertices;
        jizz = 3;
        for (i = _i = 0, _ref = vertices.length; _i < _ref; i = _i += 1) {
          v = vertices[i];
          v.x += (Math.random() - .5) * jizz;
          v.z += (Math.random() - .5) * jizz;
          if (v.y !== -size / 2) {
            v.y += (Math.random() - .5) * jizz;
          }
        }
        break;
      case 1:
        radius = 5 * scale;
        obj = {
          type: 'sphere',
          size: [radius * 0.5, radius * 0.5, radius * 0.5],
          pos: [x, y, z],
          move: true,
          world: Physics.world
        };
        geometry = new THREE.TetrahedronGeometry(radius, 2);
        material = new THREE.MeshLambertMaterial({
          color: 0xFFFFFF,
          wireframe: false
        });
        vertices = geometry.vertices;
        jizz = radius / 2.5;
        for (i = _j = 0, _ref1 = vertices.length; _j < _ref1; i = _j += 1) {
          v = vertices[i];
          v.x += (Math.random() - .5) * jizz;
          v.z += (Math.random() - .5) * jizz;
          v.y += (Math.random() - .5) * jizz;
        }
        break;
      case 2:
        height = 10;
        geometry = new THREE.CylinderGeometry(5, 5, height, 5, 3, false);
        material = new THREE.MeshLambertMaterial({
          color: 0xFFFFFF,
          wireframe: false
        });
        vertices = geometry.vertices;
        jizz = .5;
        for (i = _k = 0, _ref2 = vertices.length; _k < _ref2; i = _k += 1) {
          v = vertices[i];
          if (v.y !== height / 2) {
            v.x += (Math.random() - .5) * jizz;
            v.z += (Math.random() - .5) * jizz;
            v.y += (Math.random() - .5) * jizz;
          }
        }
        obj = {
          type: 'cylinder',
          size: [w, h, w, w, h, w, w, h, w, w, h, w],
          pos: [x, y, z],
          rot: [0, 0, 0, 0, 45, 0, 0, 22.5, 0, 0, -22.5, 0],
          move: true,
          world: Physics.world
        };
        break;
    }
    this.body = new OIMO.Body(obj);
    this.body.body.linearVelocity.set(0, -10, 0);
    this.body.body.mass = 2 + Math.random();
    this.body.body.allowSleep = false;
    material.envMap = Data.textures.reflectionCube;
    material.reflectivity = .7;
    material.transparent = true;
    material.opacity = .8;
    material.fog = true;
    material.combine = THREE.AddOperation;
    THREE.Mesh.call(this, geometry, material);
    this.occlusion = new THREE.Mesh(geometry, Stage3d.postprocessing.blackMaterial);
    return;
  }

  Stone.prototype.update = function(dt, golem) {
    var maxSpeed, speedX, speedY, speedZ, target;
    if (golem) {
      target = this.target;
      maxSpeed = 5;
      speedX = (target.x - this.body.body.position.x) * .75;
      if (speedX > maxSpeed) {
        speedX = maxSpeed;
      } else if (speedX < -maxSpeed) {
        speedX = -maxSpeed;
      }
      speedY = (target.y - this.body.body.position.y) * .75;
      if (speedY > maxSpeed) {
        speedY = maxSpeed;
      } else if (speedY < -maxSpeed) {
        speedY = -maxSpeed;
      }
      speedZ = (target.z - this.body.body.position.z) * .75;
      if (speedZ > maxSpeed) {
        speedZ = maxSpeed;
      } else if (speedZ < -maxSpeed) {
        speedZ = -maxSpeed;
      }
      this.body.body.linearVelocity.set(speedX, speedY, speedZ);
    }
    if (!golem || !this.body.getSleep()) {
      this.position.copy(this.body.getPosition());
      this.quaternion.copy(this.body.getQuaternion());
    }
    this.occlusion.position.copy(this.position);
    this.occlusion.quaternion.copy(this.quaternion);
    return this.occlusion.scale.copy(this.scale);
  };

  return Stone;

})(THREE.Mesh);

//# sourceMappingURL=data:application/json;base64,