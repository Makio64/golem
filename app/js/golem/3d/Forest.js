var Forest,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Forest = (function(_super) {
  __extends(Forest, _super);

  function Forest() {
    var angle, g, i, m, radius, tmp, _i;
    THREE.Object3D.call(this);
    for (i = _i = 0; _i < 800; i = _i += 1) {
      g = Forest.geometry.clone();
      m = new THREE.Matrix4();
      angle = Math.PI * 1.8 / 20 * (i % 20) + Math.random() * .3 + Math.PI / 2 + 0.25;
      radius = 150 + Math.floor(i / 20) * 20;
      m.makeTranslation(Math.cos(angle) * radius, 0, Math.sin(angle) * radius);
      g.applyMatrix(m);
      if (tmp) {
        tmp.merge(g);
      } else {
        tmp = g;
      }
    }
    this.tree = new THREE.Mesh(tmp, Forest.material);
    this.add(this.tree);
    return;
  }

  Forest.generateGeometry = function(padding) {
    var base, h, leaf, m;
    leaf = new THREE.CylinderGeometry(0, 15 + padding, 100 + padding * 2, 10, 10, true);
    h = 10 - padding;
    base = new THREE.CylinderGeometry(5 + padding, 5 + padding, 10 - padding, 10, 2, true);
    m = new THREE.Matrix4();
    m.makeTranslation(0, h / 2, 0);
    base.applyMatrix(m);
    m = new THREE.Matrix4();
    m.makeTranslation(0, h + 50 + padding, 0);
    leaf.applyMatrix(m);
    base.merge(leaf);
    return base;
  };

  Forest.isInit = false;

  Forest.init = function() {
    var uniforms;
    if (Forest.isInit) {
      return;
    } else {
      Forest.isInit = true;
    }
    Forest.geometry = Forest.generateGeometry(0);
    uniforms = THREE.UniformsUtils.clone(THREE.UniformsLib.fog);
    uniforms.windForce = {
      type: "f",
      value: 0.1
    };
    uniforms.iceFactor = {
      type: "f",
      value: 0.0
    };
    uniforms = THREE.UniformsUtils.merge([uniforms, THREE.UniformsLib.lights]);
    Forest.material = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader: Data.shaders.tree.vertex,
      fragmentShader: Data.shaders.tree.fragment
    });
    Forest.material.fog = true;
    Forest.material.lights = true;
    Forest.material = new THREE.MeshLambertMaterial({
      color: {
        0x333333: 0x333333
      }
    });
  };

  return Forest;

})(THREE.Object3D);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL0ZvcmVzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBO0VBQUE7aVNBQUE7O0FBQUE7QUFFQywyQkFBQSxDQUFBOztBQUFZLEVBQUEsZ0JBQUEsR0FBQTtBQUNYLFFBQUEsK0JBQUE7QUFBQSxJQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBZixDQUFvQixJQUFwQixDQUFBLENBQUE7QUFFQSxTQUFTLGlDQUFULEdBQUE7QUFDQyxNQUFBLENBQUEsR0FBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQWhCLENBQUEsQ0FBSixDQUFBO0FBQUEsTUFDQSxDQUFBLEdBQVEsSUFBQSxLQUFLLENBQUMsT0FBTixDQUFBLENBRFIsQ0FBQTtBQUFBLE1BR0EsS0FBQSxHQUFRLElBQUksQ0FBQyxFQUFMLEdBQVEsR0FBUixHQUFZLEVBQVosR0FBZSxDQUFDLENBQUEsR0FBRSxFQUFILENBQWYsR0FBc0IsSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFBLEdBQWMsRUFBcEMsR0FBdUMsSUFBSSxDQUFDLEVBQUwsR0FBUSxDQUEvQyxHQUFpRCxJQUh6RCxDQUFBO0FBQUEsTUFJQSxNQUFBLEdBQVMsR0FBQSxHQUFJLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQSxHQUFFLEVBQWIsQ0FBQSxHQUFpQixFQUo5QixDQUFBO0FBQUEsTUFLQSxDQUFDLENBQUMsZUFBRixDQUFtQixJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFnQixNQUFuQyxFQUEyQyxDQUEzQyxFQUE4QyxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFnQixNQUE5RCxDQUxBLENBQUE7QUFBQSxNQU1BLENBQUMsQ0FBQyxXQUFGLENBQWMsQ0FBZCxDQU5BLENBQUE7QUFPQSxNQUFBLElBQUcsR0FBSDtBQUNDLFFBQUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsQ0FERDtPQUFBLE1BQUE7QUFHQyxRQUFBLEdBQUEsR0FBTSxD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UUFBVDtBQUFBLE1BQ0EsWUFBQSxFQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BRGhDO0FBQUEsTUFFQSxjQUFBLEVBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBRmxDO0tBRGUsQ0FaaEIsQ0FBQTtBQUFBLElBaUJBLE1BQUMsQ0FBQSxRQUFRLENBQUMsR0FBVixHQUFnQixJQWpCaEIsQ0FBQTtBQUFBLElBa0JBLE1BQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixHQUFtQixJQWxCbkIsQ0FBQTtBQUFBLElBb0JBLE1BQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsS0FBSyxDQUFDLG1CQUFOLENBQTBCO0FBQUEsTUFBQSxLQUFBLEVBQU07QUFBQSxRQUFDLFVBQUEsUUFBRDtPQUFOO0tBQTFCLENBcEJoQixDQURPO0VBQUEsQ0F0Q1IsQ0FBQTs7Z0JBQUE7O0dBRm9CLEtBQUssQ0FBQyxTQUEzQixDQUFBIiwiZmlsZSI6ImdvbGVtLzNkL0ZvcmVzdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZvcmVzdCBleHRlbmRzIFRIUkVFLk9iamVjdDNEXG5cblx0Y29uc3RydWN0b3I6KCktPlxuXHRcdFRIUkVFLk9iamVjdDNELmNhbGwodGhpcylcblx0XHRcblx0XHRmb3IgaSBpbiBbMC4uLjgwMF0gYnkgMVxuXHRcdFx0ZyA9IEZvcmVzdC5nZW9tZXRyeS5jbG9uZSgpXHRcblx0XHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpXG5cdFx0XHQjIGFuZ2xlID0gTWF0aC5QSSoyKk1hdGgucmFuZG9tKClcblx0XHRcdGFuZ2xlID0gTWF0aC5QSSoxLjgvMjAqKGklMjApK01hdGgucmFuZG9tKCkqLjMrTWF0aC5QSS8yKzAuMjVcblx0XHRcdHJhZGl1cyA9IDE1MCtNYXRoLmZsb29yKGkvMjApKjIwXG5cdFx0XHRtLm1ha2VUcmFuc2xhdGlvbiggTWF0aC5jb3MoYW5nbGUpKnJhZGl1cywgMCwgTWF0aC5zaW4oYW5nbGUpKnJhZGl1cyApXG5cdFx0XHRnLmFwcGx5TWF0cml4KG0pXG5cdFx0XHRpZiB0bXBcblx0XHRcdFx0dG1wLm1lcmdlKGcpXG5cdFx0XHRlbHNlIFxuXHRcdFx0XHR0bXAgPSBnXG5cdFx0XHRcblx0XHRcblx0XHRAdHJlZSA9IG5ldyBUSFJFRS5NZXNoKHRtcCwgRm9yZXN0Lm1hdGVyaWFsKVxuXHRcdEBhZGQoQHRyZWUpXG5cdFx0cmV0dXJuXG5cblx0QGdlbmVyYXRlR2VvbWV0cnkgPSAocGFkZGluZyktPlxuXHRcdGxlYWYgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgwLCAxNStwYWRkaW5nLCAxMDArcGFkZGluZyoyLCAxMCwgMTAsIHRydWUpXG5cdFx0aCA9IDEwLXBhZGRpbmdcblx0XHRiYXNlID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoNStwYWRkaW5nLCA1K3BhZGRpbmcsIDEwLXBhZGRpbmcsIDEwLCAyLCB0cnVlKSBcblxuXHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpXG5cdFx0bS5tYWtlVHJhbnNsYXRpb24oIDAsIGgvMiwgMCApXG5cdFx0YmFzZS5hcHBseU1hdHJpeChtKVxuXG5cdFx0bSA9IG5ldyBUSFJFRS5NYXRyaXg0KClcblx0XHRtLm1ha2VUcmFuc2xhdGlvbiggMCwgaCArIDUwICsgcGFkZGluZywgMCApXG5cdFx0bGVhZi5hcHBseU1hdHJpeChtKVxuXHRcdGJhc2UubWVyZ2UobGVhZilcblx0XHRyZXR1cm4gYmFzZVxuXG5cdCMgSW5pdCBzdGF0aWMgZ2VvbWV0cnkgLyBtYXRlcmlhbFxuXHRAaXNJbml0ID0gZmFsc2Vcblx0QGluaXQgPSAoKT0+XG5cdFx0aWYoQGlzSW5pdClcblx0XHRcdHJldHVyblxuXHRcdGVsc2Vcblx0XHRcdEBpc0luaXQgPSB0cnVlXG5cblx0XHRAZ2VvbWV0cnkgPSBAZ2VuZXJhdGVHZW9tZXRyeSgwKVxuXHRcdFxuXHRcdHVuaWZvcm1zID0gVEhSRUUuVW5pZm9ybXNVdGlscy5jbG9uZShUSFJFRS5Vbmlmb3Jtc0xpYi5mb2cpXG5cdFx0dW5pZm9ybXMud2luZEZvcmNlID0geyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMSB9XG5cdFx0dW5pZm9ybXMuaWNlRmFjdG9yID0geyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMCB9XG5cdFx0dW5pZm9ybXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFt1bmlmb3JtcywgVEhSRUUuVW5pZm9ybXNMaWIubGlnaHRzXSlcblxuXHRcdEBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbChcblx0XHRcdHVuaWZvcm1zOnVuaWZvcm1zXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IERhdGEuc2hhZGVycy50cmVlLnZlcnRleFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IERhdGEuc2hhZGVycy50cmVlLmZyYWdtZW50XG5cdFx0KVxuXHRcdEBtYXRlcmlhbC5mb2cgPSB0cnVlXG5cdFx0QG1hdGVyaWFsLmxpZ2h0cyA9IHRydWVcblxuXHRcdEBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKGNvbG9yOnsweDMzMzMzM30pXG5cdFx0cmV0dXJuXG5cblxuXHQjIEBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6MHgzMzMzMzN9KVxuXHQjIEBtYXRlcmlhbEljZSA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6MHg5OTk5RkYsIHRyYW5zcGFyZW50OnRydWUsIG9wYWNpdHk6Ljl9KSJdfQ==