var Forest,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Forest = (function(_super) {
  __extends(Forest, _super);

  function Forest() {
    var angle, g, i, m, radius, tmp, _i;
    THREE.Object3D.call(this);
    for (i = _i = 0; _i < 800; i = _i += 1) {
      g = Forest.geometry.clone();
      m = new THREE.Matrix4();
      angle = Math.PI * 1.8 / 20 * (i % 20) + Math.random() * .3 + Math.PI / 2 + 0.25;
      radius = 150 + Math.floor(i / 20) * 20;
      m.makeTranslation(Math.cos(angle) * radius, 0, Math.sin(angle) * radius);
      g.applyMatrix(m);
      if (tmp) {
        tmp.merge(g);
      } else {
        tmp = g;
      }
    }
    this.tree = new THREE.Mesh(tmp, Forest.material);
    this.add(this.tree);
    return;
  }

  Forest.generateGeometry = function(padding) {
    var base, h, leaf, m;
    leaf = new THREE.CylinderGeometry(0, 15 + padding, 100 + padding * 2, 10, 10, true);
    h = 10 - padding;
    base = new THREE.CylinderGeometry(5 + padding, 5 + padding, 10 - padding, 10, 2, true);
    m = new THREE.Matrix4();
    m.makeTranslation(0, h / 2, 0);
    base.applyMatrix(m);
    m = new THREE.Matrix4();
    m.makeTranslation(0, h + 50 + padding, 0);
    leaf.applyMatrix(m);
    base.merge(leaf);
    return base;
  };

  Forest.isInit = false;

  Forest.init = function() {
    if (Forest.isInit) {
      return;
    } else {
      Forest.isInit = true;
    }
    Forest.geometry = Forest.generateGeometry(0);
    Forest.material = new THREE.MeshLambertMaterial({
      color: {
        0x111111: 0x111111
      }
    });
  };

  return Forest;

})(THREE.Object3D);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL0ZvcmVzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBO0VBQUE7aVNBQUE7O0FBQUE7QUFFQywyQkFBQSxDQUFBOztBQUFZLEVBQUEsZ0JBQUEsR0FBQTtBQUNYLFFBQUEsK0JBQUE7QUFBQSxJQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBZixDQUFvQixJQUFwQixDQUFBLENBQUE7QUFFQSxTQUFTLGlDQUFULEdBQUE7QUFDQyxNQUFBLENBQUEsR0FBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQWhCLENBQUEsQ0FBSixDQUFBO0FBQUEsTUFDQSxDQUFBLEdBQVEsSUFBQSxLQUFLLENBQUMsT0FBTixDQUFBLENBRFIsQ0FBQTtBQUFBLE1BR0EsS0FBQSxHQUFRLElBQUksQ0FBQyxFQUFMLEdBQVEsR0FBUixHQUFZLEVBQVosR0FBZSxDQUFDLENBQUEsR0FBRSxFQUFILENBQWYsR0FBc0IsSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFBLEdBQWMsRUFBcEMsR0FBdUMsSUFBSSxDQUFDLEVBQUwsR0FBUSxDQUEvQyxHQUFpRCxJQUh6RCxDQUFBO0FBQUEsTUFJQSxNQUFBLEdBQVMsR0FBQSxHQUFJLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQSxHQUFFLEVBQWIsQ0FBQSxHQUFpQixFQUo5QixDQUFBO0FBQUEsTUFLQSxDQUFDLENBQUMsZUFBRixDQUFtQixJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFnQixNQUFuQyxFQUEyQyxDQUEzQyxFQUE4QyxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFnQixNQUE5RCxDQUxBLENBQUE7QUFBQSxNQU1BLENBQUMsQ0FBQyxXQUFGLENBQWMsQ0FBZCxDQU5BLENBQUE7QUFPQSxNQUFBLElBQUcsR0FBSDtBQUNDLFFBQUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsQ0FERDtPQUFBLE1BQUE7QUFHQyxRQUFBLEdBQUEsR0FBTSxDQUFOLENBSEQ7T0FSRDtBQUFBLEtBRkE7QUFBQSxJQWdCQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYLEVBQWdCLE1BQU0sQ0FBQyxRQUF2QixDQWhCWixDQUFBO0FBQUEsSUFpQkEsSUFBQyxDQUFBLEdBQUQsQ0FBSyxJQUFDLENBQUEsSUFBTixDQWpCQSxDQUFBO0FBa0JBLFVBQUEsQ0FuQlc7RUFBQSxDQUFaOztBQUFBLEVBcUJBLE1BQUMsQ0FBQSxnQkFBRCxHQUFvQixTQUFDLE9BQUQsR0FBQTtBQUNuQixRQUFBLGdCQUFBO0FBQUEsSUFBQSxJQUFBLEdBQVcsSUFBQSxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsQ0FBdkIsRUFBMEIsRUFBQSxHQUFHLE9BQTdCLEVBQXNDLEdBQUEsR0FBSSxPQUFBLEdBQVEsQ0FBbEQsRUFBcUQsRUFBckQsRUFBeUQsRUFBekQsRUFBNkQsSUFBN0QsQ0FBWCxDQUFBO0FBQUEsSUFDQSxDQUFBLEdBQUksRUFBQSxHQUFHLE9BRFAsQ0FBQTtBQUFBLElBRUEsSUFBQSxHQUFXLElBQUEsS0FBSyxDQUFDLGdCQUFOLENBQXVCLENBQUEsR0FBRSxPQUF6QixFQUFrQyxDQUFBLEdBQUUsT0FBcEMsRUFBNkMsRUFBQSxHQUFHLE9BQWhELEVBQXlELEVBQXpELEVBQTZELENBQTdELEVBQWdFLElBQWhFLENBRlgsQ0FBQTtBQUFBLElBSUEsQ0FBQSxHQUFRLElBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBQSxDQUpSLENBQUE7QUFBQSxJQUtBLENBQUMsQ0FBQyxlQUFGLENBQW1CLENBQW5CLEVBQXNCLENBQUEsR0FBRSxDQUF4QixFQUEyQixDQUEzQixDQUxBLENBQUE7QUFBQSxJQU1BLElBQUksQ0FBQyxXQUFMLENBQWlCLENBQWpCLENBTkEsQ0FBQTtBQUFBLElBUUEsQ0FBQSxHQUFRLElBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBQSxDQVJSLENBQUE7QUFBQSxJQVNBLENBQUMsQ0FBQyxlQUFGLENBQW1CLENBQW5CLEVBQXNCLENBQUEsR0FBSSxFQUFKLEdBQVMsT0FBL0IsRUFBd0MsQ0FBeEMsQ0FUQSxDQUFBO0FBQUEsSUFVQSxJQUFJLENBQUMsV0FBTCxDQUFpQixDQUFqQixDQVZBLENBQUE7QUFBQSxJQVdBLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBWCxDQVhBLENBQUE7QUFZQSxXQUFPLElBQVAsQ0FibUI7RUFBQSxDQXJCcEIsQ0FBQTs7QUFBQSxFQXFDQSxNQUFDLENBQUEsTUFBRCxHQUFVLEtBckNWLENBQUE7O0FBQUEsRUFzQ0EsTUFBQyxDQUFBLElBQUQsR0FBUSxTQUFBLEdBQUE7QUFDUCxJQUFBLElBQUcsTUFBQyxDQUFBLE1BQUo7QUFDQyxZQUFBLENBREQ7S0FBQSxNQUFBO0FBR0MsTUFBQSxNQUFDLENBQUEsTUFBRCxHQUFVLElBQVYsQ0FIRDtLQUFBO0FBQUEsSUFLQSxNQUFDLENBQUEsUUFBRCxHQUFZLE1BQUMsQ0FBQSxnQkFBRCxDQUFrQixDQUFsQixDQUxaLENBQUE7QUFBQSxJQW9CQSxNQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEtBQUssQ0FBQyxtQkFBTixDQUEwQjtBQUFBLE1BQUEsS0FBQSxFQUFNO0FBQUEsUUFBQyxVQUFBLFFBQUQ7T0FBTjtLQUExQixDQXBCaEIsQ0FETztFQUFBLENBdENSLENBQUE7O2dCQUFBOztHQUZvQixLQUFLLENBQUMsU0FBM0IsQ0FBQSIsImZpbGUiOiJnb2xlbS8zZC9Gb3Jlc3QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGb3Jlc3QgZXh0ZW5kcyBUSFJFRS5PYmplY3QzRFxuXG5cdGNvbnN0cnVjdG9yOigpLT5cblx0XHRUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpXG5cdFx0XG5cdFx0Zm9yIGkgaW4gWzAuLi44MDBdIGJ5IDFcblx0XHRcdGcgPSBGb3Jlc3QuZ2VvbWV0cnkuY2xvbmUoKVx0XG5cdFx0XHRtID0gbmV3IFRIUkVFLk1hdHJpeDQoKVxuXHRcdFx0IyBhbmdsZSA9IE1hdGguUEkqMipNYXRoLnJhbmRvbSgpXG5cdFx0XHRhbmdsZSA9IE1hdGguUEkqMS44LzIwKihpJTIwKStNYXRoLnJhbmRvbSgpKi4zK01hdGguUEkvMiswLjI1XG5cdFx0XHRyYWRpdXMgPSAxNTArTWF0aC5mbG9vcihpLzIwKSoyMFxuXHRcdFx0bS5tYWtlVHJhbnNsYXRpb24oIE1hdGguY29zKGFuZ2xlKSpyYWRpdXMsIDAsIE1hdGguc2luKGFuZ2xlKSpyYWRpdXMgKVxuXHRcdFx0Zy5hcHBseU1hdHJpeChtKVxuXHRcdFx0aWYgdG1wXG5cdFx0XHRcdHRtcC5tZXJnZShnKVxuXHRcdFx0ZWxzZSBcblx0XHRcdFx0dG1wID0gZ1xuXHRcdFx0XG5cdFx0XG5cdFx0QHRyZWUgPSBuZXcgVEhSRUUuTWVzaCh0bXAsIEZvcmVzdC5tYXRlcmlhbClcblx0XHRAYWRkKEB0cmVlKVxuXHRcdHJldHVyblxuXG5cdEBnZW5lcmF0ZUdlb21ldHJ5ID0gKHBhZGRpbmcpLT5cblx0XHRsZWFmID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMCwgMTUrcGFkZGluZywgMTAwK3BhZGRpbmcqMiwgMTAsIDEwLCB0cnVlKVxuXHRcdGggPSAxMC1wYWRkaW5nXG5cdFx0YmFzZSA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDUrcGFkZGluZywgNStwYWRkaW5nLCAxMC1wYWRkaW5nLCAxMCwgMiwgdHJ1ZSkgXG5cblx0XHRtID0gbmV3IFRIUkVFLk1hdHJpeDQoKVxuXHRcdG0ubWFrZVRyYW5zbGF0aW9uKCAwLCBoLzIsIDAgKVxuXHRcdGJhc2UuYXBwbHlNYXRyaXgobSlcblxuXHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpXG5cdFx0bS5tYWtlVHJhbnNsYXRpb24oIDAsIGggKyA1MCArIHBhZGRpbmcsIDAgKVxuXHRcdGxlYWYuYXBwbHlNYXRyaXgobSlcblx0XHRiYXNlLm1lcmdlKGxlYWYpXG5cdFx0cmV0dXJuIGJhc2VcblxuXHQjIEluaXQgc3RhdGljIGdlb21ldHJ5IC8gbWF0ZXJpYWxcblx0QGlzSW5pdCA9IGZhbHNlXG5cdEBpbml0ID0gKCk9PlxuXHRcdGlmKEBpc0luaXQpXG5cdFx0XHRyZXR1cm5cblx0XHRlbHNlXG5cdFx0XHRAaXNJbml0ID0gdHJ1ZVxuXG5cdFx0QGdlb21ldHJ5ID0gQGdlbmVyYXRlR2VvbWV0cnkoMClcblx0XHRcblx0XHQjIHVuaWZvcm1zID0gVEhSRUUuVW5pZm9ybXNVdGlscy5jbG9uZShUSFJFRS5Vbmlmb3Jtc0xpYi5mb2cpXG5cdFx0IyB1bmlmb3Jtcy53aW5kRm9yY2UgPSB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMC4xIH1cblx0XHQjIHVuaWZvcm1zLmljZUZhY3RvciA9IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjAgfVxuXHRcdCMgdW5pZm9ybXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFt1bmlmb3JtcywgVEhSRUUuVW5pZm9ybXNMaWIubGlnaHRzXSlcblxuXHRcdCMgQG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKFxuXHRcdCMgXHR1bmlmb3Jtczp1bmlmb3Jtc1xuXHRcdCMgXHR2ZXJ0ZXhTaGFkZXI6IERhdGEuc2hhZGVycy50cmVlLnZlcnRleFxuXHRcdCMgXHRmcmFnbWVudFNoYWRlcjogRGF0YS5zaGFkZXJzLnRyZWUuZnJhZ21lbnRcblx0XHQjIClcblx0XHQjIEBtYXRlcmlhbC5mb2cgPSB0cnVlXG5cdFx0IyBAbWF0ZXJpYWwubGlnaHRzID0gdHJ1ZVxuXG5cdFx0QG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoY29sb3I6ezB4MTExMTExfSlcblx0XHRyZXR1cm5cblxuXG5cdCMgQG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoweDMzMzMzM30pXG5cdCMgQG1hdGVyaWFsSWNlID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoweDk5OTlGRiwgdHJhbnNwYXJlbnQ6dHJ1ZSwgb3BhY2l0eTouOX0pIl19