var Temple,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Temple = (function(_super) {
  __extends(Temple, _super);

  function Temple() {
    var geometry, m, material, uniforms;
    geometry = new THREE.PlaneGeometry(100, 100, 256, 256);
    m = new THREE.Matrix4();
    m.makeRotationX(-Math.PI / 2);
    geometry.applyMatrix(m);
    uniforms = {
      map: {
        type: "t",
        value: null
      },
      bumpMap: {
        type: "t",
        value: null
      },
      bumpScale: {
        type: "f",
        value: 10.0
      }
    };
    uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, uniforms]);
    material = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader: Data.shaders.temple.vertex,
      fragmentShader: Data.shaders.temple.fragment
    });
    material.fog = true;
    THREE.Mesh.call(this, geometry, material);
    this.position.y -= 0.1;
    uniforms.bumpMap.value = Data.textures['temple.png'];
    uniforms.bumpScale.value = 4.0;
    uniforms.map.value = Data.textures['water.jpg'];
    return;
  }

  return Temple;

})(THREE.Mesh);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL1RlbXBsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBO0VBQUE7aVNBQUE7O0FBQUE7QUFFQywyQkFBQSxDQUFBOztBQUFZLEVBQUEsZ0JBQUEsR0FBQTtBQUNYLFFBQUEsK0JBQUE7QUFBQSxJQUFBLFFBQUEsR0FBZSxJQUFBLEtBQUssQ0FBQyxhQUFOLENBQXFCLEdBQXJCLEVBQXlCLEdBQXpCLEVBQTZCLEdBQTdCLEVBQWlDLEdBQWpDLENBQWYsQ0FBQTtBQUFBLElBQ0EsQ0FBQSxHQUFRLElBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBQSxDQURSLENBQUE7QUFBQSxJQUVBLENBQUMsQ0FBQyxhQUFGLENBQWlCLENBQUEsSUFBSyxDQUFDLEVBQU4sR0FBUyxDQUExQixDQUZBLENBQUE7QUFBQSxJQUdBLFFBQVEsQ0FBQyxXQUFULENBQXFCLENBQXJCLENBSEEsQ0FBQTtBQUFBLElBS0EsUUFBQSxHQUFXO0FBQUEsTUFDVixHQUFBLEVBQU07QUFBQSxRQUFFLElBQUEsRUFBTSxHQUFSO0FBQUEsUUFBYSxLQUFBLEVBQU8sSUFBcEI7T0FESTtBQUFBLE1BRVYsT0FBQSxFQUFVO0FBQUEsUUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFFBQWEsS0FBQSxFQUFPLElBQXBCO09BRkE7QUFBQSxNQUdWLFNBQUEsRUFBWTtBQUFBLFFBQUUsSUFBQSxFQUFNLEdBQVI7QUFBQSxRQUFhLEtBQUEsRUFBTyxJQUFwQjtPQUhGO0tBTFgsQ0FBQTtBQUFBLElBV0EsUUFBQSxHQUFXLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBcEIsQ0FBMEIsQ0FDcEMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQURrQixFQUVwQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BRmtCLEVBR3BDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FIa0IsRUFJcEMsUUFKb0MsQ0FBMUIsQ0FYWCxDQUFBO0FBQUEsSUFrQkEsUUFBQSxHQUFlLElBQUEsS0FBSyxDQUFDLGNBQU4sQ0FDZDtBQUFBLE1BQUEsUUFBQSxFQUFTLFFBQVQ7QUFBQSxNQUNBLFlBQUEsRUFBYyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQURsQztBQUFBLE1BRUEsY0FBQSxFQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUZwQztLQURjLENBbEJmLENBQUE7QUFBQSxJQTJCQSxRQUFRLENBQUMsR0FBVCxHQUFlLElBM0JmLENBQUE7QUFBQSxJQTZCQSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsUUFBdEIsRUFBZ0MsUUFBaEMsQ0E3QkEsQ0FBQTtBQUFBLElBOEJBLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBZCxJQUFpQixHQTlCakIsQ0FBQTtBQUFBLElBK0JBLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBakIsR0FBeUIsSUFBSSxDQUFDLFFBQVMsQ0FBQSxZQUFBLENBL0J2QyxDQUFBO0FBQUEsSUFnQ0EsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFuQixHQUEyQixHQWhDM0IsQ0FBQTtBQUFBLElBaUNBLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBYixHQUFxQixJQUFJLENBQUMsUUFBUyxDQUFBLFdBQUEsQ0FqQ25DLENBQUE7QUFtQ0EsVUFBQSxDQXBDVztFQUFBLENBQVo7O2dCQUFBOztHQUZvQixLQUFLLENBQUMsS0FBM0IsQ0FBQSIsImZpbGUiOiJnb2xlbS8zZC9UZW1wbGUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBUZW1wbGUgZXh0ZW5kcyBUSFJFRS5NZXNoXG5cblx0Y29uc3RydWN0b3I6KCktPlxuXHRcdGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoIDEwMCwxMDAsMjU2LDI1NiApO1xuXHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdG0ubWFrZVJvdGF0aW9uWCggLU1hdGguUEkvMiApO1xuXHRcdGdlb21ldHJ5LmFwcGx5TWF0cml4KG0pXG5cblx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdG1hcCA6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiBudWxsIH1cblx0XHRcdGJ1bXBNYXAgOiB7IHR5cGU6IFwidFwiLCB2YWx1ZTogbnVsbCB9XG5cdFx0XHRidW1wU2NhbGUgOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMTAuMCB9XG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtcblx0XHRcdFRIUkVFLlVuaWZvcm1zTGliLmZvZ1xuXHRcdFx0VEhSRUUuVW5pZm9ybXNMaWIubGlnaHRzXG5cdFx0XHRUSFJFRS5Vbmlmb3Jtc0xpYi5zaGFkb3dtYXBcblx0XHRcdHVuaWZvcm1zXG5cdFx0XSlcblxuXHRcdG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKFxuXHRcdFx0dW5pZm9ybXM6dW5pZm9ybXNcblx0XHRcdHZlcnRleFNoYWRlcjogRGF0YS5zaGFkZXJzLnRlbXBsZS52ZXJ0ZXhcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBEYXRhLnNoYWRlcnMudGVtcGxlLmZyYWdtZW50XG5cdFx0XHQjIHRyYW5zcGFyZW50OiB0cnVlXG5cdFx0XHQjIHdpcmVmcmFtZTogdHJ1ZVxuXHRcdClcblx0XHRcblx0XHQjIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoweEZGMDAwMH0pXG5cdFx0bWF0ZXJpYWwuZm9nID0gdHJ1ZVxuXG5cdFx0VEhSRUUuTWVzaC5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbClcblx0XHR0aGlzLnBvc2l0aW9uLnktPTAuMTtcblx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gRGF0YS50ZXh0dXJlc1sndGVtcGxlLnBuZyddXG5cdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gNC4wXG5cdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gRGF0YS50ZXh0dXJlc1snd2F0ZXIuanBnJ11cblx0XHQjIHRoaXMucm90YXRpb24ueCA9IC1NYXRoLlBJLzJcblx0XHRyZXR1cm4iXX0=