var Light,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Light = (function(_super) {
  __extends(Light, _super);

  function Light() {
    var geometry, material, texture;
    geometry = Light.geometry;
    texture = Data.textures['light.png'];
    material = new THREE.MeshBasicMaterial({
      depthWrite: false,
      depthTest: false,
      map: texture,
      color: 0x8888FF,
      wireframe: false,
      transparent: true
    });
    material.blending = THREE.AdditiveBlending;
    material.side = THREE.DoubleSide;
    THREE.Mesh.call(this, geometry, material);
    this.time = Math.random() * 10000;
    this.randomOpacity = 1056 + 750 * Math.random();
    this.randomScale = 956 + 150 * Math.random();
    this.baseScale = .6 + .4 * Math.random();
    this._opacity = 1;
    return;
  }

  Light.prototype.update = function(dt) {
    var scale;
    this.time += dt;
    this.material.opacity = Math.abs(Math.sin(this.time / this.randomOpacity)) * this._opacity;
    scale = .9 + Math.abs(Math.sin(this.time / this.randomScale)) * .1;
    this.scale.set(scale, scale, scale);
  };

  Light.generateGeometry = function() {
    var geometry1, geometry2, geometry3, h, m, translateMatrix, translateY, w;
    h = 250 + 30 * Math.random();
    w = 40;
    translateMatrix = new THREE.Matrix4();
    translateMatrix.makeTranslation(h / 2, w / 2, 0);
    geometry1 = new THREE.PlaneGeometry(h, w);
    geometry1.applyMatrix(translateMatrix);
    geometry2 = new THREE.PlaneGeometry(h, w);
    m = new THREE.Matrix4();
    m.makeRotationX(Math.PI / 3);
    geometry2.applyMatrix(m);
    geometry2.applyMatrix(translateMatrix);
    geometry3 = new THREE.PlaneGeometry(h, w);
    m = new THREE.Matrix4();
    m.makeRotationX(-Math.PI / 3);
    geometry3.applyMatrix(m);
    geometry3.applyMatrix(translateMatrix);
    translateY = new THREE.Matrix4();
    translateY.makeRotationY(Math.PI / 2);
    geometry1.applyMatrix(translateY);
    geometry2.applyMatrix(translateY);
    geometry3.applyMatrix(translateY);
    geometry1.merge(geometry2);
    geometry1.merge(geometry3);
    return geometry1;
  };

  Light.geometry = Light.generateGeometry();

  return Light;

})(THREE.Mesh);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL0xpZ2h0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEtBQUE7RUFBQTtpU0FBQTs7QUFBQTtBQUVDLDBCQUFBLENBQUE7O0FBQVksRUFBQSxlQUFBLEdBQUE7QUFDWCxRQUFBLDJCQUFBO0FBQUEsSUFBQSxRQUFBLEdBQVcsS0FBSyxDQUFDLFFBQWpCLENBQUE7QUFBQSxJQUNBLE9BQUEsR0FBVSxJQUFJLENBQUMsUUFBUyxDQUFBLFdBQUEsQ0FEeEIsQ0FBQTtBQUFBLElBRUEsUUFBQSxHQUFlLElBQUEsS0FBSyxDQUFDLGlCQUFOLENBQXdCO0FBQUEsTUFBQyxVQUFBLEVBQVcsS0FBWjtBQUFBLE1BQW1CLFNBQUEsRUFBVSxLQUE3QjtBQUFBLE1BQW9DLEdBQUEsRUFBSSxPQUF4QztBQUFBLE1BQWlELEtBQUEsRUFBTSxRQUF2RDtBQUFBLE1BQWlFLFNBQUEsRUFBVSxLQUEzRTtBQUFBLE1BQWtGLFdBQUEsRUFBWSxJQUE5RjtLQUF4QixDQUZmLENBQUE7QUFBQSxJQUdBLFFBQVEsQ0FBQyxRQUFULEdBQW9CLEtBQUssQ0FBQyxnQkFIMUIsQ0FBQTtBQUFBLElBSUEsUUFBUSxDQUFDLElBQVQsR0FBZ0IsS0FBSyxDQUFDLFVBSnRCLENBQUE7QUFBQSxJQU1BLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBWCxDQUFnQixJQUFoQixFQUFzQixRQUF0QixFQUFnQyxRQUFoQyxDQU5BLENBQUE7QUFBQSxJQVFBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFBLEdBQWMsS0FSdEIsQ0FBQTtBQUFBLElBU0EsSUFBQyxDQUFBLGFBQUQsR0FBaUIsSUFBQSxHQUFLLEdBQUEsR0FBSSxJQUFJLENBQUMsTUFBTCxDQUFBLENBVDFCLENBQUE7QUFBQSxJQVVBLElBQUMsQ0FBQSxXQUFELEdBQWUsR0FBQSxHQUFJLEdBQUEsR0FBSSxJQUFJLENBQUMsTUFBTCxDQUFBLENBVnZCLENBQUE7QUFB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QUFWLENBQXNCLFVBQXRCLENBM0JBLENBQUE7QUFBQSxJQTRCQSxTQUFTLENBQUMsV0FBVixDQUFzQixVQUF0QixDQTVCQSxDQUFBO0FBQUEsSUE2QkEsU0FBUyxDQUFDLFdBQVYsQ0FBc0IsVUFBdEIsQ0E3QkEsQ0FBQTtBQUFBLElBK0JBLFNBQVMsQ0FBQyxLQUFWLENBQWdCLFNBQWhCLENBL0JBLENBQUE7QUFBQSxJQWdDQSxTQUFTLENBQUMsS0FBVixDQUFnQixTQUFoQixDQWhDQSxDQUFBO0FBNkNBLFdBQU8sU0FBUCxDQTlDbUI7RUFBQSxDQXpCcEIsQ0FBQTs7QUFBQSxFQXlFQSxLQUFDLENBQUEsUUFBRCxHQUFZLEtBQUMsQ0FBQSxnQkFBRCxDQUFBLENBekVaLENBQUE7O2VBQUE7O0dBRm1CLEtBQUssQ0FBQyxLQUExQixDQUFBIiwiZmlsZSI6ImdvbGVtLzNkL0xpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTGlnaHQgZXh0ZW5kcyBUSFJFRS5NZXNoXG5cblx0Y29uc3RydWN0b3I6KCktPlxuXHRcdGdlb21ldHJ5ID0gTGlnaHQuZ2VvbWV0cnkgI25ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KCAxMCwxMCwyLDIgKTtcblx0XHR0ZXh0dXJlID0gRGF0YS50ZXh0dXJlc1snbGlnaHQucG5nJ11cblx0XHRtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7ZGVwdGhXcml0ZTpmYWxzZSwgZGVwdGhUZXN0OmZhbHNlLCBtYXA6dGV4dHVyZSwgY29sb3I6MHg4ODg4RkYsIHdpcmVmcmFtZTpmYWxzZSwgdHJhbnNwYXJlbnQ6dHJ1ZX0pXG5cdFx0bWF0ZXJpYWwuYmxlbmRpbmcgPSBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nXG5cdFx0bWF0ZXJpYWwuc2lkZSA9IFRIUkVFLkRvdWJsZVNpZGVcblxuXHRcdFRIUkVFLk1lc2guY2FsbCh0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwpXG5cblx0XHRAdGltZSA9IE1hdGgucmFuZG9tKCkqMTAwMDBcblx0XHRAcmFuZG9tT3BhY2l0eSA9IDEwNTYrNzUwKk1hdGgucmFuZG9tKClcblx0XHRAcmFuZG9tU2NhbGUgPSA5NTYrMTUwKk1hdGgucmFuZG9tKClcblx0XHRAYmFzZVNjYWxlID0gLjYrLjQqTWF0aC5yYW5kb20oKVxuXHRcdEBfb3BhY2l0eSA9IDFcblx0XHRcblx0XHRyZXR1cm5cblxuXHR1cGRhdGU6KGR0KS0+XG5cdFx0QHRpbWUgKz0gZHRcblx0XHRAbWF0ZXJpYWwub3BhY2l0eSA9IE1hdGguYWJzKE1hdGguc2luKEB0aW1lL0ByYW5kb21PcGFjaXR5KSkqQF9vcGFjaXR5XG5cdFx0c2NhbGUgPSAuOStNYXRoLmFicyhNYXRoLnNpbihAdGltZS9AcmFuZG9tU2NhbGUpKSouMVxuXHRcdEBzY2FsZS5zZXQoc2NhbGUsc2NhbGUsc2NhbGUpXG5cdFx0cmV0dXJuXG5cblx0IyAjIFN0YXRpYyBtZXRob2QsIGNhbGwgb25seSBvbmNlXG5cdEBnZW5lcmF0ZUdlb21ldHJ5ID0gKCktPlxuXHRcdGggPSAyNTArMzAqTWF0aC5yYW5kb20oKTtcblx0XHR3ID0gNDA7XG5cblx0XHR0cmFuc2xhdGVNYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdHRyYW5zbGF0ZU1hdHJpeC5tYWtlVHJhbnNsYXRpb24oIGgvMix3LzIsMCApO1xuXG5cdFx0Z2VvbWV0cnkxID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoaCx3KTtcblx0XHRnZW9tZXRyeTEuYXBwbHlNYXRyaXgodHJhbnNsYXRlTWF0cml4KTtcblx0XHRnZW9tZXRyeTIgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShoLHcpO1xuXHRcdFxuXHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdG0ubWFrZVJvdGF0aW9uWCggTWF0aC5QSS8zICk7XG5cdFxuXHRcdGdlb21ldHJ5Mi5hcHBseU1hdHJpeChtKTtcblx0XHRnZW9tZXRyeTIuYXBwbHlNYXRyaXgodHJhbnNsYXRlTWF0cml4KTtcblx0XHRcblx0XHRnZW9tZXRyeTMgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShoLHcpO1xuXHRcdFxuXHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdG0ubWFrZVJvdGF0aW9uWCggLU1hdGguUEkvMyApO1xuXHRcdFxuXHRcdGdlb21ldHJ5My5hcHBseU1hdHJpeChtKTtcblx0XHRnZW9tZXRyeTMuYXBwbHlNYXRyaXgodHJhbnNsYXRlTWF0cml4KTtcblxuXHRcdHRyYW5zbGF0ZVkgPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdHRyYW5zbGF0ZVkubWFrZVJvdGF0aW9uWSggTWF0aC5QSS8yICk7XG5cblx0XHRnZW9tZXRyeTEuYXBwbHlNYXRyaXgodHJhbnNsYXRlWSk7XG5cdFx0Z2VvbWV0cnkyLmFwcGx5TWF0cml4KHRyYW5zbGF0ZVkpO1xuXHRcdGdlb21ldHJ5My5hcHBseU1hdHJpeCh0cmFuc2xhdGVZKTtcblxuXHRcdGdlb21ldHJ5MS5tZXJnZShnZW9tZXRyeTIpO1xuXHRcdGdlb21ldHJ5MS5tZXJnZShnZW9tZXRyeTMpO1xuXG5cdFx0IyB0b2RvIE90aGVyIHNpZGUgb2YgdGhlIGxpZ2h0XG5cdFx0IyBnZW8yID0gZ2VvbWV0cnkxLmNsb25lKClcblx0XHQjIG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdCMgbS5tYWtlUm90YXRpb25YKCBNYXRoLlBJICk7XG5cdFx0IyBnZW8yLmFwcGx5TWF0cml4KG0pXG5cdFx0IyB0cmFuc2xhdGVNYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXHRcdCMgdHJhbnNsYXRlTWF0cml4Lm1ha2VUcmFuc2xhdGlvbiggMCwwLC00MCApO1xuXHRcdCMgZ2VvMi5hcHBseU1hdHJpeCh0cmFuc2xhdGVNYXRyaXgpO1xuXG5cdFx0IyBnZW9tZXRyeTEubWVyZ2UoZ2VvMilcblxuXHRcdHJldHVybiBnZW9tZXRyeTE7XG5cblx0QGdlb21ldHJ5ID0gQGdlbmVyYXRlR2VvbWV0cnkoKVxuIl19