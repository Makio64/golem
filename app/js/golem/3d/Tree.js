var Tree,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tree = (function(_super) {
  __extends(Tree, _super);

  function Tree() {
    var angle, g, i, m, radius, tmp, _i;
    THREE.Object3D.call(this);
    for (i = _i = 0; _i < 200; i = _i += 1) {
      g = Tree.geometry.clone();
      m = new THREE.Matrix4();
      angle = Math.PI * 1.8 / 20 * (i % 20) + Math.random() * .3 + Math.PI / 2 + 0.25;
      radius = 100 + Math.floor(i / 20) * 20;
      m.makeTranslation(Math.cos(angle) * radius, 0, Math.sin(angle) * radius);
      g.applyMatrix(m);
      if (tmp) {
        tmp.merge(g);
      } else {
        tmp = g;
      }
    }
    this.tree = new THREE.Mesh(tmp, Tree.material);
    this.add(this.tree);
    return;
  }

  Tree.generateGeometry = function(padding) {
    var base, h, leaf, m;
    leaf = new THREE.CylinderGeometry(0, 15 + padding, 100 + padding * 2, 10, 10, true);
    h = 10 - padding;
    base = new THREE.CylinderGeometry(5 + padding, 5 + padding, 10 - padding, 10, 2, true);
    m = new THREE.Matrix4();
    m.makeTranslation(0, h / 2, 0);
    base.applyMatrix(m);
    m = new THREE.Matrix4();
    m.makeTranslation(0, h + 50 + padding, 0);
    leaf.applyMatrix(m);
    base.merge(leaf);
    return base;
  };

  Tree.isInit = false;

  Tree.init = function() {
    if (Tree.isInit) {
      return;
    } else {
      Tree.isInit = true;
    }
    Tree.geometry = Tree.generateGeometry(0);
    Tree.material = new THREE.ShaderMaterial({
      uniforms: {
        windForce: {
          type: "f",
          value: 0.1
        },
        iceFactor: {
          type: "f",
          value: 0.0
        }
      },
      vertexShader: Data.shaders.tree.vertex,
      fragmentShader: Data.shaders.tree.fragment
    });
  };

  return Tree;

})(THREE.Object3D);

//# sourceMappingURL=data:application/json;base64,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IjpbImNsYXNzIFRyZWUgZXh0ZW5kcyBUSFJFRS5PYmplY3QzRFxuXG5cdGNvbnN0cnVjdG9yOigpLT5cblx0XHRUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpXG5cdFx0XG5cdFx0Zm9yIGkgaW4gWzAuLi4yMDBdIGJ5IDFcblx0XHRcdGcgPSBUcmVlLmdlb21ldHJ5LmNsb25lKClcdFxuXHRcdFx0bSA9IG5ldyBUSFJFRS5NYXRyaXg0KClcblx0XHRcdCMgYW5nbGUgPSBNYXRoLlBJKjIqTWF0aC5yYW5kb20oKVxuXHRcdFx0YW5nbGUgPSBNYXRoLlBJKjEuOC8yMCooaSUyMCkrTWF0aC5yYW5kb20oKSouMytNYXRoLlBJLzIrMC4yNVxuXHRcdFx0cmFkaXVzID0gMTAwK01hdGguZmxvb3IoaS8yMCkqMjBcblx0XHRcdG0ubWFrZVRyYW5zbGF0aW9uKCBNYXRoLmNvcyhhbmdsZSkqcmFkaXVzLCAwLCBNYXRoLnNpbihhbmdsZSkqcmFkaXVzIClcblx0XHRcdGcuYXBwbHlNYXRyaXgobSlcblx0XHRcdGlmIHRtcFxuXHRcdFx0XHR0bXAubWVyZ2UoZylcblx0XHRcdGVsc2UgXG5cdFx0XHRcdHRtcCA9IGdcblx0XHRcdFxuXHRcdFxuXHRcdEB0cmVlID0gbmV3IFRIUkVFLk1lc2godG1wLCBUcmVlLm1hdGVyaWFsKVxuXHRcdEBhZGQoQHRyZWUpXG5cdFx0cmV0dXJuXG5cblx0QGdlbmVyYXRlR2VvbWV0cnkgPSAocGFkZGluZyktPlxuXHRcdGxlYWYgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgwLCAxNStwYWRkaW5nLCAxMDArcGFkZGluZyoyLCAxMCwgMTAsIHRydWUpXG5cdFx0aCA9IDEwLXBhZGRpbmdcblx0XHRiYXNlID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoNStwYWRkaW5nLCA1K3BhZGRpbmcsIDEwLXBhZGRpbmcsIDEwLCAyLCB0cnVlKSBcblxuXHRcdG0gPSBuZXcgVEhSRUUuTWF0cml4NCgpXG5cdFx0bS5tYWtlVHJhbnNsYXRpb24oIDAsIGgvMiwgMCApXG5cdFx0YmFzZS5hcHBseU1hdHJpeChtKVxuXG5cdFx0bSA9IG5ldyBUSFJFRS5NYXRyaXg0KClcblx0XHRtLm1ha2VUcmFuc2xhdGlvbiggMCwgaCArIDUwICsgcGFkZGluZywgMCApXG5cdFx0bGVhZi5hcHBseU1hdHJpeChtKVxuXHRcdGJhc2UubWVyZ2UobGVhZilcblx0XHRyZXR1cm4gYmFzZVxuXG5cdCMgSW5pdCBzdGF0aWMgZ2VvbWV0cnkgLyBtYXRlcmlhbFxuXHRAaXNJbml0ID0gZmFsc2Vcblx0QGluaXQgPSAoKT0+XG5cdFx0aWYoQGlzSW5pdClcblx0XHRcdHJldHVyblxuXHRcdGVsc2Vcblx0XHRcdEBpc0luaXQgPSB0cnVlXG5cblx0XHRAZ2VvbWV0cnkgPSBAZ2VuZXJhdGVHZW9tZXRyeSgwKVxuXHRcdFxuXHRcdEBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbChcblx0XHRcdHVuaWZvcm1zOlxuXHRcdFx0XHR3aW5kRm9yY2U6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjEgfSxcblx0XHRcdFx0aWNlRmFjdG9yOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMC4wIH1cblx0XHRcdHZlcnRleFNoYWRlcjogRGF0YS5zaGFkZXJzLnRyZWUudmVydGV4XG5cdFx0XHRmcmFnbWVudFNoYWRlcjogRGF0YS5zaGFkZXJzLnRyZWUuZnJhZ21lbnRcblx0XHQpXG5cblx0XHRyZXR1cm5cblxuXG5cdCMgQG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoweDMzMzMzM30pXG5cdCMgQG1hdGVyaWFsSWNlID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoweDk5OTlGRiwgdHJhbnNwYXJlbnQ6dHJ1ZSwgb3BhY2l0eTouOX0pIl19