var Source,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Source = (function(_super) {
  __extends(Source, _super);

  function Source() {
    var geometry, material, uniforms;
    geometry = new THREE.OctahedronGeometry(5, 5);
    this.time = 0.0;
    uniforms = {
      time: {
        type: "f",
        value: 0.0
      },
      noisePower: {
        type: "f",
        value: 1.0
      },
      anglePower: {
        type: "f",
        value: 0.3
      },
      anglePowerAmplification: {
        type: "f",
        value: 0.0
      }
    };
    uniforms = THREE.UniformsUtils.merge([uniforms, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap]);
    material = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader: Data.shaders.source.vertex,
      fragmentShader: Data.shaders.source.fragment,
      transparent: true,
      wireframe: true
    });
    material.fog = true;
    material.lights = true;
    THREE.Mesh.call(this, geometry, material);
    return;
  }

  Source.prototype.update = function(dt) {
    this.time += dt / 1500;
    this.material.uniforms.time.value = this.time;
  };

  return Source;

})(THREE.Mesh);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL1NvdXJjZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBO0VBQUE7aVNBQUE7O0FBQUE7QUFFQywyQkFBQSxDQUFBOztBQUFZLEVBQUEsZ0JBQUEsR0FBQTtBQUNYLFFBQUEsNEJBQUE7QUFBQSxJQUFBLFFBQUEsR0FBZSxJQUFBLEtBQUssQ0FBQyxrQkFBTixDQUF5QixDQUF6QixFQUE0QixDQUE1QixDQUFmLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxJQUFELEdBQVEsR0FGUixDQUFBO0FBQUEsSUFJQSxRQUFBLEdBQVc7QUFBQSxNQUNWLElBQUEsRUFBTztBQUFBLFFBQUUsSUFBQSxFQUFNLEdBQVI7QUFBQSxRQUFhLEtBQUEsRUFBTyxHQUFwQjtPQURHO0FBQUEsTUFFVixVQUFBLEVBQWE7QUFBQSxRQUFFLElBQUEsRUFBTSxHQUFSO0FBQUEsUUFBYSxLQUFBLEVBQU8sR0FBcEI7T0FGSDtBQUFBLE1BR1YsVUFBQSxFQUFhO0FBQUEsUUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFFBQWEsS0FBQSxFQUFPLEdBQXBCO09BSEg7QUFBQSxNQUlWLHVCQUFBLEVBQTBCO0FBQUEsUUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFFBQWEsS0FBQSxFQUFPLEdBQXBCO09BSmhCO0tBSlgsQ0FBQTtBQUFBLElBVUEsUUFBQSxHQUFXLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBcEIsQ0FBMEIsQ0FDcEMsUUFEb0MsRUFFcEMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUZrQixFQUdwQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BSGtCLEVBSXBDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FKa0IsQ0FBMUIsQ0FWWCxDQUFBO0FBQUEsSUFpQkEsUUFBQSxHQUFlLElBQUEsS0FBSyxDQUFDLGNBQU4sQ0FDZDtBQUFBLE1BQUEsUUFBQSxFQUFTLFFBQVQ7QUFBQSxNQUNBLFlBQUEsRUFBYyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQURsQztBQUFBLE1BRUEsY0FBQSxFQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUZwQztBQUFBLE1BR0EsV0FBQSxFQUFhLElBSGI7QUFBQSxNQUlBLFNBQUEsRUFBVyxJQUpYO0tBRGMsQ0FqQmYsQ0FBQTtBQUFBLElBeUJBLFFBQVEsQ0FBQyxHQUFULEdBQWUsSUF6QmYsQ0FBQTtBQUFBLElBMEJBLFFBQVEsQ0FBQyxNQUFULEdBQWtCLElBMUJsQixDQUFBO0FBQUEsSUE0QkEsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFYLENBQWdCLElBQWhCLEVBQXNCLFFBQXRCLEVBQWdDLFFBQWhDLENBNUJBLENBQUE7QUFxQ0EsVUFBQSxDQXRDVztFQUFBLENBQVo7O0FBQUEsbUJBd0NBLE1BQUEsR0FBTyxTQUFDLEVBQUQsR0FBQTtBQUNOLElBQUEsSUFBQyxDQUFBLElBQUQsSUFBUyxFQUFBLEdBQUcsSUFBWixDQUFBO0FBQUEsSUFDQSxJQUFDLENBQUEsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBeEIsR0FBZ0MsSUFBQyxDQUFBLElBRGpDLENBRE07RUFBQSxDQXhDUCxDQUFBOztnQkFBQTs7R0FGb0IsS0FBSyxDQUFDLEtBQTNCLENBQUEiLCJmaWxlIjoiZ29sZW0vM2QvU291cmNlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU291cmNlIGV4dGVuZHMgVEhSRUUuTWVzaFxuXG5cdGNvbnN0cnVjdG9yOigpLT5cblx0XHRnZW9tZXRyeSA9IG5ldyBUSFJFRS5PY3RhaGVkcm9uR2VvbWV0cnkoNSwgNSlcblx0XHRcblx0XHRAdGltZSA9IDAuMDtcblxuXHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0dGltZSA6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjAgfVxuXHRcdFx0bm9pc2VQb3dlciA6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfVxuXHRcdFx0YW5nbGVQb3dlciA6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjMgfVxuXHRcdFx0YW5nbGVQb3dlckFtcGxpZmljYXRpb24gOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMC4wIH1cblx0XHR9XG5cdFx0dW5pZm9ybXMgPSBUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtcblx0XHRcdHVuaWZvcm1zXG5cdFx0XHRUSFJFRS5Vbmlmb3Jtc0xpYi5mb2dcblx0XHRcdFRIUkVFLlVuaWZvcm1zTGliLmxpZ2h0c1xuXHRcdFx0VEhSRUUuVW5pZm9ybXNMaWIuc2hhZG93bWFwXG5cdFx0XSlcblxuXHRcdG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKFxuXHRcdFx0dW5pZm9ybXM6dW5pZm9ybXNcblx0XHRcdHZlcnRleFNoYWRlcjogRGF0YS5zaGFkZXJzLnNvdXJjZS52ZXJ0ZXhcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBEYXRhLnNoYWRlcnMuc291cmNlLmZyYWdtZW50XG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZVxuXHRcdFx0d2lyZWZyYW1lOiB0cnVlXG5cdFx0KVxuXHRcdCMgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe2NvbG9yOjB4RkYwMDAwfSlcblx0XHRtYXRlcmlhbC5mb2cgPSB0cnVlXG5cdFx0bWF0ZXJpYWwubGlnaHRzID0gdHJ1ZVxuXG5cdFx0VEhSRUUuTWVzaC5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbClcblxuXHRcdCMgZ3VpID0gbmV3IGRhdC5HVUkoKVxuXHRcdCMgZ3VpLmFkZCh1bmlmb3Jtcy5ub2lzZVBvd2VyLCd2YWx1ZScsMC4wMDEsMjApLm5hbWUoJ25vaXNlUG93ZXInKS5zdGVwKDAuMDEpXG5cdFx0IyBndWkuYWRkKHVuaWZvcm1zLmFuZ2xlUG93ZXIsJ3ZhbHVlJywwLjAwMSwyMCkubmFtZSgnYW5nbGVQb3dlcicpLnN0ZXAoMC4wMSlcblx0XHQjIGd1aS5hZGQodW5pZm9ybXMuYW5nbGVQb3dlckFtcGxpZmljYXRpb24sJ3ZhbHVlJywwLjAsMjApLm5hbWUoJ2FuZ2xlUG93ZXJBbXBsaWZpY2F0aW9uJykuc3RlcCgwLjAxKVxuXG5cdFx0IyB0aGlzLnNjYWxlLnkgPSA1XG5cblx0XHRyZXR1cm5cblxuXHR1cGRhdGU6KGR0KS0+XG5cdFx0QHRpbWUgKz0gZHQvMTUwMFxuXHRcdEBtYXRlcmlhbC51bmlmb3Jtcy50aW1lLnZhbHVlID0gQHRpbWVcblx0XHRyZXR1cm5cbiJdfQ==