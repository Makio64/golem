var Source,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Source = (function(_super) {
  __extends(Source, _super);

  function Source() {
    var geometry, gui, material, uniforms;
    geometry = new THREE.OctahedronGeometry(5, 5);
    this.time = 0.0;
    uniforms = {
      time: {
        type: "f",
        value: 0.0
      },
      noisePower: {
        type: "f",
        value: 1.0
      },
      anglePower: {
        type: "f",
        value: 0.3
      },
      anglePowerAmplification: {
        type: "f",
        value: 0.0
      }
    };
    uniforms = THREE.UniformsUtils.merge([uniforms, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap]);
    material = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader: Data.shaders.source.vertex,
      fragmentShader: Data.shaders.source.fragment,
      transparent: true,
      wireframe: true
    });
    material.fog = true;
    material.lights = true;
    THREE.Mesh.call(this, geometry, material);
    gui = new dat.GUI();
    gui.add(uniforms.noisePower, 'value', 0.001, 20).name('noisePower').step(0.01);
    gui.add(uniforms.anglePower, 'value', 0.001, 20).name('anglePower').step(0.01);
    gui.add(uniforms.anglePowerAmplification, 'value', 0.0, 20).name('anglePowerAmplification').step(0.01);
    return;
  }

  Source.prototype.update = function(dt) {
    this.time += dt / 1500;
    this.material.uniforms.time.value = this.time;
  };

  return Source;

})(THREE.Mesh);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL1NvdXJjZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBO0VBQUE7aVNBQUE7O0FBQUE7QUFFQywyQkFBQSxDQUFBOztBQUFZLEVBQUEsZ0JBQUEsR0FBQTtBQUNYLFFBQUEsaUNBQUE7QUFBQSxJQUFBLFFBQUEsR0FBZSxJQUFBLEtBQUssQ0FBQyxrQkFBTixDQUF5QixDQUF6QixFQUE0QixDQUE1QixDQUFmLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxJQUFELEdBQVEsR0FGUixDQUFBO0FBQUEsSUFJQSxRQUFBLEdBQVc7QUFBQSxNQUNWLElBQUEsRUFBTztBQUFBLFFBQUUsSUFBQSxFQUFNLEdBQVI7QUFBQSxRQUFhLEtBQUEsRUFBTyxHQUFwQjtPQURHO0FBQUEsTUFFVixVQUFBLEVBQWE7QUFBQSxRQUFFLElBQUEsRUFBTSxHQUFSO0FBQUEsUUFBYSxLQUFBLEVBQU8sR0FBcEI7T0FGSDtBQUFBLE1BR1YsVUFBQSxFQUFhO0FBQUEsUUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFFBQWEsS0FBQSxFQUFPLEdBQXBCO09BSEg7QUFBQSxNQUlWLHVCQUFBLEVBQTBCO0FBQUEsUUFBRSxJQUFBLEVBQU0sR0FBUjtBQUFBLFFBQWEsS0FBQSxFQUFPLEdBQXBCO09BSmhCO0tBSlgsQ0FBQTtBQUFBLElBVUEsUUFBQSxHQUFXLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBcEIsQ0FBMEIsQ0FDcEMsUUFEb0MsRUFFcEMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUZrQixFQUdwQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BSGtCLEVBSXBDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FKa0IsQ0FBMUIsQ0FWWCxDQUFBO0FBQUEsSUFpQkEsUUFBQSxHQUFlLElBQUEsS0FBSyxDQUFDLGNBQU4sQ0FDZDtBQUFBLE1BQUEsUUFBQSxFQUFTLFFBQVQ7QUFBQSxNQUNBLFlBQUEsRUFBYyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQURsQztBQUFBLE1BRUEsY0FBQSxFQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUZwQztBQUFBLE1BR0EsV0FBQSxFQUFhLElBSGI7QUFBQSxNQUlBLFNBQUEsRUFBVyxJQUpYO0tBRGMsQ0FqQmYsQ0FBQTtBQUFBLElBeUJBLFFBQVEsQ0FBQyxHQUFULEdBQWUsSUF6QmYsQ0FBQTtBQUFBLElBMEJBLFFBQVEsQ0FBQyxNQUFULEdBQWtCLElBMUJsQixDQUFBO0FBQUEsSUE0QkEsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFYLENBQWdCLElBQWhCLEVBQXNCLFFBQXRCLEVBQWdDLFFBQWhDLENBNUJBLENBQUE7QUFBQSxJQThCQSxHQUFBLEdBQVUsSUFBQSxHQUFHLENBQUMsR0FBSixDQUFBLENBOUJWLENBQUE7QUFBQSxJQStCQSxHQUFHLENBQUMsR0FBSixDQUFRLFFBQVEsQ0FBQyxVQUFqQixFQUE0QixPQUE1QixFQUFvQyxLQUFwQyxFQUEwQyxFQUExQyxDQUE2QyxDQUFDLElBQTlDLENBQW1ELFlBQW5ELENBQWdFLENBQUMsSUFBakUsQ0FBc0UsSUFBdEUsQ0EvQkEsQ0FBQTtBQUFBLElBZ0NBLEdBQUcsQ0FBQyxHQUFKLENBQVEsUUFBUSxDQUFDLFVBQWpCLEVBQTRCLE9BQTVCLEVBQW9DLEtBQXBDLEVBQTBDLEVBQTFDLENBQTZDLENBQUMsSUFBOUMsQ0FBbUQsWUFBbkQsQ0FBZ0UsQ0FBQyxJQUFqRSxDQUFzRSxJQUF0RSxDQWhDQSxDQUFBO0FBQUEsSUFpQ0EsR0FBRyxDQUFDLEdBQUosQ0FBUSxRQUFRLENBQUMsdUJBQWpCLEVBQXlDLE9BQXpDLEVBQWlELEdBQWpELEVBQXFELEVBQXJELENBQXdELENBQUMsSUFBekQsQ0FBOEQseUJBQTlELENBQXdGLENBQUMsSUFBekYsQ0FBOEYsSUFBOUYsQ0FqQ0EsQ0FBQTtBQXFDQSxVQUFBLENBdENXO0VBQUEsQ0FBWjs7QUFBQSxtQkF3Q0EsTUFBQSxHQUFPLFNBQUMsRUFBRCxHQUFBO0FBQ04sSUFBQSxJQUFDLENBQUEsSUFBRCxJQUFTLEVBQUEsR0FBRyxJQUFaLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUF4QixHQUFnQyxJQUFDLENBQUEsSUFEakMsQ0FETTtFQUFBLENBeENQLENBQUE7O2dCQUFBOztHQUZvQixLQUFLLENBQUMsS0FBM0IsQ0FBQSIsImZpbGUiOiJnb2xlbS8zZC9Tb3VyY2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTb3VyY2UgZXh0ZW5kcyBUSFJFRS5NZXNoXG5cblx0Y29uc3RydWN0b3I6KCktPlxuXHRcdGdlb21ldHJ5ID0gbmV3IFRIUkVFLk9jdGFoZWRyb25HZW9tZXRyeSg1LCA1KVxuXHRcdFxuXHRcdEB0aW1lID0gMC4wO1xuXG5cdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHR0aW1lIDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMCB9XG5cdFx0XHRub2lzZVBvd2VyIDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDEuMCB9XG5cdFx0XHRhbmdsZVBvd2VyIDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMyB9XG5cdFx0XHRhbmdsZVBvd2VyQW1wbGlmaWNhdGlvbiA6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjAgfVxuXHRcdH1cblx0XHR1bmlmb3JtcyA9IFRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuXHRcdFx0dW5pZm9ybXNcblx0XHRcdFRIUkVFLlVuaWZvcm1zTGliLmZvZ1xuXHRcdFx0VEhSRUUuVW5pZm9ybXNMaWIubGlnaHRzXG5cdFx0XHRUSFJFRS5Vbmlmb3Jtc0xpYi5zaGFkb3dtYXBcblx0XHRdKVxuXG5cdFx0bWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoXG5cdFx0XHR1bmlmb3Jtczp1bmlmb3Jtc1xuXHRcdFx0dmVydGV4U2hhZGVyOiBEYXRhLnNoYWRlcnMuc291cmNlLnZlcnRleFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IERhdGEuc2hhZGVycy5zb3VyY2UuZnJhZ21lbnRcblx0XHRcdHRyYW5zcGFyZW50OiB0cnVlXG5cdFx0XHR3aXJlZnJhbWU6IHRydWVcblx0XHQpXG5cdFx0IyBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6MHhGRjAwMDB9KVxuXHRcdG1hdGVyaWFsLmZvZyA9IHRydWVcblx0XHRtYXRlcmlhbC5saWdodHMgPSB0cnVlXG5cblx0XHRUSFJFRS5NZXNoLmNhbGwodGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsKVxuXG5cdFx0Z3VpID0gbmV3IGRhdC5HVUkoKVxuXHRcdGd1aS5hZGQodW5pZm9ybXMubm9pc2VQb3dlciwndmFsdWUnLDAuMDAxLDIwKS5uYW1lKCdub2lzZVBvd2VyJykuc3RlcCgwLjAxKVxuXHRcdGd1aS5hZGQodW5pZm9ybXMuYW5nbGVQb3dlciwndmFsdWUnLDAuMDAxLDIwKS5uYW1lKCdhbmdsZVBvd2VyJykuc3RlcCgwLjAxKVxuXHRcdGd1aS5hZGQodW5pZm9ybXMuYW5nbGVQb3dlckFtcGxpZmljYXRpb24sJ3ZhbHVlJywwLjAsMjApLm5hbWUoJ2FuZ2xlUG93ZXJBbXBsaWZpY2F0aW9uJykuc3RlcCgwLjAxKVxuXG5cdFx0IyB0aGlzLnNjYWxlLnkgPSA1XG5cblx0XHRyZXR1cm5cblxuXHR1cGRhdGU6KGR0KS0+XG5cdFx0QHRpbWUgKz0gZHQvMTUwMFxuXHRcdEBtYXRlcmlhbC51bmlmb3Jtcy50aW1lLnZhbHVlID0gQHRpbWVcblx0XHRyZXR1cm5cbiJdfQ==