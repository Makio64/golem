var Attractor3d,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Attractor3d = (function(_super) {
  __extends(Attractor3d, _super);

  function Attractor3d(radius, name, stonesRequire, scaleStone, scaleLight, oscilationSpeed, oscilationIntensity) {
    var geometry, material;
    this.stonesRequire = stonesRequire;
    this.scaleStone = scaleStone;
    this.scaleLight = scaleLight;
    this.oscilationSpeed = oscilationSpeed;
    this.oscilationIntensity = oscilationIntensity;
    this.update = __bind(this.update, this);
    this.time = 0;
    geometry = new THREE.SphereGeometry(radius);
    material = new THREE.MeshBasicMaterial({
      color: 0xFFFFFF,
      wireframe: true,
      transparent: true,
      opacity: 0
    });
    THREE.Mesh.call(this, geometry, material);
    this.basePosition = new THREE.Vector3();
    this.name = name;
    this.target = new THREE.Vector3();
    this.visible = false;
    return;
  }

  Attractor3d.prototype.calculateDistance = function() {
    var dx, dz;
    dx = this.basePosition.x;
    dz = this.basePosition.z;
    this.distance = Math.sqrt(dx * dx + dz * dz);
    this.originAngle = Math.atan2(dz, dx);
  };

  Attractor3d.prototype.update = function(dt, scaleY, angle) {
    var oscilation, x, z;
    this.time += dt;
    angle += this.originAngle;
    x = Math.cos(angle) * this.distance;
    z = Math.sin(angle) * this.distance;
    oscilation = Math.abs(Math.sin(this.time * this.oscilationSpeed) * this.oscilationIntensity);
    this.position.set(x, this.basePosition.y * scaleY + 15 + oscilation, z);
    this.target.copy(this.position);
    this.target.multiplyScalar(1 / 100);
  };

  return Attractor3d;

})(THREE.Mesh);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvbGVtLzNkL0F0dHJhY3RvcjNkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLFdBQUE7RUFBQTs7aVNBQUE7O0FBQUE7QUFFQyxnQ0FBQSxDQUFBOztBQUFZLEVBQUEscUJBQUMsTUFBRCxFQUFRLElBQVIsRUFBYyxhQUFkLEVBQTZCLFVBQTdCLEVBQXlDLFVBQXpDLEVBQXFELGVBQXJELEVBQXNFLG1CQUF0RSxHQUFBO0FBRVgsUUFBQSxrQkFBQTtBQUFBLElBRndCLElBQUMsQ0FBQSxnQkFBQSxhQUV6QixDQUFBO0FBQUEsSUFGdUMsSUFBQyxDQUFBLGFBQUEsVUFFeEMsQ0FBQTtBQUFBLElBRm1ELElBQUMsQ0FBQSxhQUFBLFVBRXBELENBQUE7QUFBQSxJQUYrRCxJQUFDLENBQUEsa0JBQUEsZUFFaEUsQ0FBQTtBQUFBLElBRmdGLElBQUMsQ0FBQSxzQkFBQSxtQkFFakYsQ0FBQTtBQUFBLDJDQUFBLENBQUE7QUFBQSxJQUFBLElBQUMsQ0FBQSxJQUFELEdBQVEsQ0FBUixDQUFBO0FBQUEsSUFDQSxRQUFBLEdBQWUsSUFBQSxLQUFLLENBQUMsY0FBTixDQUFxQixNQUFyQixDQURmLENBQUE7QUFBQSxJQUVBLFFBQUEsR0FBZSxJQUFBLEtBQUssQ0FBQyxpQkFBTixDQUF3QjtBQUFBLE1BQUMsS0FBQSxFQUFNLFFBQVA7QUFBQSxNQUFpQixTQUFBLEVBQVUsSUFBM0I7QUFBQSxNQUFnQyxXQUFBLEVBQVksSUFBNUM7QUFBQSxNQUFpRCxPQUFBLEVBQVEsQ0FBekQ7S0FBeEIsQ0FGZixDQUFBO0FBQUEsSUFHQSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsUUFBdEIsRUFBZ0MsUUFBaEMsQ0FIQSxDQUFBO0FBQUEsSUFNQSxJQUFDLENBQUEsWUFBRCxHQUFvQixJQUFBLEtBQUssQ0FBQyxPQUFOLENBQUEsQ0FOcEIsQ0FBQTtBQUFBLElBT0EsSUFBQyxDQUFBLElBQUQsR0FBUSxJQVBSLENBQUE7QUFBQSxJQVFBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxLQUFLLENBQUMsT0FBTixDQUFBLENBUmQsQ0FBQTtBQUFBLElBU0EsSUFBSSxDQUFDLE9BQUwsR0FBZSxLQVRmLENBQUE7QUFXQSxVQUFBLENBYlc7RUFBQSxDQUFaOztBQUFBLHdCQWVBLGlCQUFBLEdBQWtCLFNBQUEsR0FBQTtBQUNqQixRQUFBLE1BQUE7QUFBQSxJQUFBLEVBQUEsR0FBSyxJQUFDLENBQUEsWUFBWSxDQUFDLENBQW5CLENBQUE7QUFBQSxJQUNBLEVBQUEsR0FBSyxJQUFDLENBQUEsWUFBWSxDQUFDLENBRG5CLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBSSxDQUFDLElBQUwsQ0FBVSxFQUFBLEdBQUcsRUFBSCxHQUFNLEVBQUEsR0FBRyxFQUFuQixDQUZaLENBQUE7QUFBQSxJQUdBLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBSSxDQUFDLEtBQUwsQ0FBVyxFQUFYLEVBQWMsRUFBZCxDQUhmLENBRGlCO0VBQUEsQ0FmbEIsQ0FBQTs7QUFBQSx3QkFzQkEsTUFBQSxHQUFPLFNBQUMsRUFBRCxFQUFJLE1BQUosRUFBWSxLQUFaLEdBQUE7QUFDTixRQUFBLGdCQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsSUFBRCxJQUFTLEVBQVQsQ0FBQTtBQUFBLElBQ0EsS0FBQSxJQUFTLElBQUMsQ0FBQSxXQURWLENBQUE7QUFBQSxJQUVBLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQVQsQ0FBQSxHQUFnQixJQUFDLENBQUEsUUFGckIsQ0FBQTtBQUFBLElBR0EsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBVCxDQUFBLEdBQWdCLElBQUMsQ0FBQSxRQUhyQixDQUFBO0FBQUEsSUFLQSxVQUFBLEdBQWEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUMsQ0FBQSxJQUFELEdBQU0sSUFBQyxDQUFBLGVBQWhCLENBQUEsR0FBaUMsSUFBQyxDQUFBLG1CQUEzQyxDQUxiLENBQUE7QUFBQSxJQU1BLElBQUMsQ0FBQSxRQUFRLENBQUMsR0FBVixDQUFjLENBQWQsRUFBZ0IsSUFBQyxDQUFBLFlBQVksQ0FBQyxDQUFkLEdBQWdCLE1BQWhCLEdBQXVCLEVBQXZCLEdBQTBCLFVBQTFDLEVBQXFELENBQXJELENBTkEsQ0FBQTtBQUFBLElBUUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQWEsSUFBQyxDQUFBLFFBQWQsQ0FSQSxDQUFBO0FBQUEsSUFTQSxJQUFDLENBQUEsTUFBTSxDQUFDLGNBQVIsQ0FBdUIsQ0FBQSxHQUFFLEdBQXpCLENBVEEsQ0FETTtFQUFBLENBdEJQLENBQUE7O3FCQUFBOztHQUZ5QixLQUFLLENBQUMsS0FBaEMsQ0FBQSIsImZpbGUiOiJnb2xlbS8zZC9BdHRyYWN0b3IzZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEF0dHJhY3RvcjNkIGV4dGVuZHMgVEhSRUUuTWVzaFxuXG5cdGNvbnN0cnVjdG9yOihyYWRpdXMsbmFtZSxAc3RvbmVzUmVxdWlyZSxAc2NhbGVTdG9uZSxAc2NhbGVMaWdodCxAb3NjaWxhdGlvblNwZWVkLEBvc2NpbGF0aW9uSW50ZW5zaXR5KS0+XG5cblx0XHRAdGltZSA9IDBcblx0XHRnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShyYWRpdXMpXG5cdFx0bWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe2NvbG9yOjB4RkZGRkZGLCB3aXJlZnJhbWU6dHJ1ZSx0cmFuc3BhcmVudDp0cnVlLG9wYWNpdHk6MH0pXG5cdFx0VEhSRUUuTWVzaC5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbClcblxuXHRcdCMgRGF0YSBmcm9tIGZieFxuXHRcdEBiYXNlUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpXG5cdFx0QG5hbWUgPSBuYW1lXG5cdFx0QHRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKClcblx0XHR0aGlzLnZpc2libGUgPSBmYWxzZVxuXG5cdFx0cmV0dXJuXG5cblx0Y2FsY3VsYXRlRGlzdGFuY2U6KCktPlxuXHRcdGR4ID0gQGJhc2VQb3NpdGlvbi54XG5cdFx0ZHogPSBAYmFzZVBvc2l0aW9uLnpcblx0XHRAZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHgqZHgrZHoqZHopXG5cdFx0QG9yaWdpbkFuZ2xlID0gTWF0aC5hdGFuMihkeixkeClcblx0XHRyZXR1cm5cblxuXHR1cGRhdGU6KGR0LHNjYWxlWSwgYW5nbGUpPT5cblx0XHRAdGltZSArPSBkdFxuXHRcdGFuZ2xlICs9IEBvcmlnaW5BbmdsZVxuXHRcdHggPSBNYXRoLmNvcyhhbmdsZSkqQGRpc3RhbmNlXG5cdFx0eiA9IE1hdGguc2luKGFuZ2xlKSpAZGlzdGFuY2VcblxuXHRcdG9zY2lsYXRpb24gPSBNYXRoLmFicyhNYXRoLnNpbihAdGltZSpAb3NjaWxhdGlvblNwZWVkKSpAb3NjaWxhdGlvbkludGVuc2l0eSlcblx0XHRAcG9zaXRpb24uc2V0KHgsQGJhc2VQb3NpdGlvbi55KnNjYWxlWSsxNStvc2NpbGF0aW9uLHopXG5cdFx0XG5cdFx0QHRhcmdldC5jb3B5KEBwb3NpdGlvbilcblx0XHRAdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKDEvMTAwKVxuXHRcdHJldHVyblxuXG4iXX0=